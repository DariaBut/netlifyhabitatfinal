{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/config.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,EAAE,UAAU,EAAE,kBAAkB,EAAE,MAAM,oBAAoB,CAAC;AAGpE,OAAO,EAAE,wBAAwB,EAAE,YAAY,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AAEzG,MAAM,UAAU,MAAM,CAAC,EAA0D;IAAjF,iBA4DC;IA5DsB,mBAAA,EAAA,OAA0D;IAAxD,IAAA,MAAM,YAAA,EAAK,UAAU,cAAvB,UAAyB,CAAF;IAC1C,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;IAE9B,IAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,uBAAuB,EAAE,KAAK,CAAC,CAAC;IACxE,MAAM,GAAG,MAAM,IAAI,YAAY,CAAC;IAEhC,IAAM,GAAG,GAAG,oBAAoB,CAAC,MAAM,CAAC,CAAC;IACzC,IAAI,OAAO,IAAI,GAAG,EAAE;QAChB,MAAM,CAAC,IAAI,CAAC,mBAAmB,GAAG,GAAG,CAAC,CAAC;KAC1C;IAED,IAAM,MAAM,GAAG,wBAAwB,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAEtE,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,cAAO,CAAC,CAAC;IAEvE,IAAM,mBAAmB,yBAClB,CAAC,UAAU,CAAC,mBAAmB,IAAI,EAAE,CAAC,GACtC,kBAAkB,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAC9C,CAAC;IAEF,UAAU,CAAC,GAAG,yBACP,CAAC,UAAU,CAAC,GAAG,IAAI,EAAE,CAAC,KACzB,kBAAkB,EAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,KAAK,GAC9D,CAAC;IACF,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,UAAU,CAAC,GAAG,CAAC,kBAAkB,CAAC;IAEnE,+DAA+D;IAC/D,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE;QACnE,UAAU,CAAC,eAAe,GAAG;YAAY,sBAAA,eAAe,EAAA;iBAAA,CAAC;KAC5D;IAED,IAAI,UAAU,CAAC,GAAG,CAAC,kBAAkB,KAAK,SAAS,EAAE;QACjD,8EAA8E;QAC9E,UAAU,CAAC,OAAO,GAAG,aAAa,CAAC;KACtC;IAED,0DAA0D;IAC1D,yDAAyD;IACzD,uDAAuD;IACvD,4BAA4B;IAC5B,MAAM,CAAC,KAAK,CACR,0BAAwB,UAAU,CAAC,GAAG,CAAC,kBAAkB,4BAAuB,OAAO,CAAC,GAAG,CAAC,wBAAwB,MAAG,CAC1H,CAAC;IACF,IAAI,UAAU,CAAC,GAAG,CAAC,kBAAkB,KAAK,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE;QACrF,UAAU,CAAC,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC;KACjE;IAED,MAAM,CAAC,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAE3E,OAAO,MAAM,CAAC,MAAM,CAChB,UAAU;IACV,oDAAoD;IACpD;QACI,mBAAmB,EAAE,mBAAmB;KAC3C;IACD,+BAA+B;IAC/B;QACI,aAAa,EAAE,IAAI;KACtB,CACJ,CAAC;AACN,CAAC","sourcesContent":["import { NextConfig } from 'next/dist/next-server/server/config';\r\nimport { getBoolEnv, parseUniformConfig } from '@uniformdev/common';\r\n\r\nimport { ConfigOptions } from '.';\r\nimport { parseUniformServerConfig, serverLogger, tryGetUniformVersion } from '@uniformdev/common-server';\r\n\r\nexport function config({ logger, ...nextConfig }: NextConfig & ConfigOptions = {}) {\r\n    nextConfig = nextConfig || {};\r\n\r\n    const runtime = getBoolEnv(process.env, 'UNIFORM_IS_AT_RUNTIME', false);\r\n    logger = logger || serverLogger;\r\n\r\n    const ver = tryGetUniformVersion(logger);\r\n    if (runtime && ver) {\r\n        logger.info('Uniform version: ' + ver);\r\n    }\r\n\r\n    const config = parseUniformServerConfig(process.env, logger, runtime);\r\n\r\n    console.debug = config.UNIFORM_OPTIONS_DEBUG ? console.info : () => {};\r\n\r\n    const publicRuntimeConfig = {\r\n        ...(nextConfig.publicRuntimeConfig || {}),\r\n        ...parseUniformConfig(process.env, runtime),\r\n    };\r\n\r\n    nextConfig.env = {\r\n        ...(nextConfig.env || {}),\r\n        UNIFORM_BUILD_MODE: process.env.UNIFORM_BUILD_MODE || 'ssr',\r\n    };\r\n    process.env.UNIFORM_BUILD_MODE = nextConfig.env.UNIFORM_BUILD_MODE;\r\n\r\n    // Keep the same build Id when we are creating a static website\r\n    if (['export', 'publish'].includes(nextConfig.env.UNIFORM_BUILD_MODE)) {\r\n        nextConfig.generateBuildId = async () => 'uniform-build';\r\n    }\r\n\r\n    if (nextConfig.env.UNIFORM_BUILD_MODE === 'publish') {\r\n        // TODO: we need to pass ticket as well, see where UNIFORM_API_URL is assigned\r\n        nextConfig.distDir = `.temp/.next`;\r\n    }\r\n\r\n    // Serve the local assets (css,js) from the serverUrl only\r\n    // when in ssr mode, we don't want this for static export\r\n    // this is needed for experience editor to request them\r\n    // from the correct location\r\n    logger.debug(\r\n        `Checking build mode (${nextConfig.env.UNIFORM_BUILD_MODE}) and asset prefix (${process.env.UNIFORM_SSR_ASSET_PREFIX})`\r\n    );\r\n    if (nextConfig.env.UNIFORM_BUILD_MODE === 'ssr' && process.env.UNIFORM_SSR_ASSET_PREFIX) {\r\n        nextConfig.assetPrefix = process.env.UNIFORM_SSR_ASSET_PREFIX;\r\n    }\r\n\r\n    logger.info('publicRuntimeConfig: ' + JSON.stringify(publicRuntimeConfig));\r\n\r\n    return Object.assign(\r\n        nextConfig,\r\n        // these properties are forced by the uniform config\r\n        {\r\n            publicRuntimeConfig: publicRuntimeConfig,\r\n        },\r\n        // enforce `trailingSlash:true`\r\n        {\r\n            trailingSlash: true,\r\n        },\r\n    );\r\n}\r\n"]}