{"version":3,"file":"buildScriptTag.js","sourceRoot":"","sources":["../../../../src/processHtml/elements/buildScriptTag.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,gDAA0B;AAI1B,6CAA6C;AAC7C,aAAa;AACb,SAAgB,cAAc,CAAC,MAAc;IACzC,OAAO;QACH,4FAA4F;QAC5F,eAAe,EAAE,KAAK;QAEtB,iBAAiB,EAAE,UAAU,IAAS;YAClC,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;QAC/C,CAAC;QAED,WAAW,EAAE,UAAU,IAAS,EAAE,SAAc;YAC5C,IAAM,WAAW,gBAAQ,IAAI,CAAC,OAAO,CAAE,CAAC;YACxC,IAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;YAC7B,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBACnC,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,SAAS,EAAE;oBAClC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC;iBAC5B;gBACD,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,SAAS,EAAE;oBAClC,8CAA8C;oBAC9C,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC;iBAC5B;gBACD,6BAA6B;gBAC7B,IAAI,CAAC,GAAG,EAAE;oBACN,WAAW,CAAC,uBAAuB,GAAG;wBAClC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;qBACtC,CAAC;iBACL;gBACD,gDAAgD;gBAChD,IAAI,WAAW,CAAC,KAAK,EAAE;oBACnB,WAAW,CAAC,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC;iBAC7C;gBACD,OAAO,eAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;aACrD;YACD,OAAO,eAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QACtD,CAAC;KACJ,CAAC;AACN,CAAC;AAnCD,wCAmCC","sourcesContent":["import React from 'react';\r\nimport { Logger } from '@uniformdev/common';\r\nimport { HtmlProcessingInstruction } from '../HtmlProcessingInstruction';\r\n\r\n// workaround for react stripping script tags\r\n// @ts-ignore\r\nexport function buildScriptTag(logger: Logger): HtmlProcessingInstruction {\r\n    return {\r\n        // this is important to keep to `false` otherwise script tags will be wrapped in script tags\r\n        replaceChildren: false,\r\n\r\n        shouldProcessNode: function (node: any) {\r\n            return node.name && node.name === 'script';\r\n        },\r\n\r\n        processNode: function (node: any, _children: any) {\r\n            const scriptProps = { ...node.attribs };\r\n            const src = node.attribs.src;\r\n            if (src || node.children.length === 1) {\r\n                if (node.attribs.async !== undefined) {\r\n                    scriptProps.async = true;\r\n                }\r\n                if (node.attribs.defer !== undefined) {\r\n                    //logger.info(\"defer: \" + node.attribs.defer);\r\n                    scriptProps.defer = true;\r\n                }\r\n                // handling inline script tag\r\n                if (!src) {\r\n                    scriptProps.dangerouslySetInnerHTML = {\r\n                        __html: node.children[0].data || '',\r\n                    };\r\n                }\r\n                // sometimes class name can be set on script tag\r\n                if (scriptProps.class) {\r\n                    scriptProps.className = scriptProps.class;\r\n                }\r\n                return React.createElement('script', scriptProps);\r\n            }\r\n            return React.createElement('script', scriptProps);\r\n        },\r\n    };\r\n}\r\n"]}