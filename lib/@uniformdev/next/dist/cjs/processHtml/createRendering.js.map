{"version":3,"file":"createRendering.js","sourceRoot":"","sources":["../../../src/processHtml/createRendering.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\n\r\nimport { parseGuid, throwException, tryParseGuid } from '@uniformdev/common';\r\nimport { RenderingContext, RenderingNode } from '@uniformdev/common-client';\r\nimport { CreateRenderingFromHtml } from './CreateRenderingFromHtml';\r\nimport { UniformContextProvider, useUniformContext } from '../contexts';\r\n\r\nconst getHtmlOrJSONFromMap = (\r\n    htmlMap: any,\r\n    rendering: RenderingNode,\r\n    datasourceId: string\r\n): string | void => {\r\n    if (htmlMap) {\r\n        const htmlsPerDatasources = htmlMap[rendering.renderingId || throwException('renderingId')] || {};\r\n        return htmlsPerDatasources[tryParseGuid(datasourceId) + '|' + rendering.settings.Parameters];\r\n    }\r\n};\r\n\r\ninterface LayoutHtml {\r\n    bodyHtml: string;\r\n    headHtml?: string;\r\n}\r\n\r\nconst isLayoutHtmlWithBody = (html: any): html is LayoutHtml =>\r\n    typeof html === 'object' && html.hasOwnProperty('bodyHtml');\r\n\r\nconst isJSONRendering = (html: any): html is string =>\r\n    typeof html === 'string' && (html.startsWith('\"{') || html.endsWith('}\"'));\r\n\r\nconst isJavaScriptRendering = (html: any): boolean =>\r\n    typeof html === 'string' && html.startsWith('<javascript-rendering ');\r\n\r\nconst isValidHtmlRendering = (html: any): html is string =>\r\n    typeof html === 'string' && !isJavaScriptRendering(html) && !isJSONRendering(html);\r\n\r\nexport interface CreateRenderingProps {\r\n    rendering: RenderingNode;\r\n    index: number;\r\n    placeholderKey: string;\r\n    renderingContext: RenderingContext;\r\n}\r\n\r\n/**\r\n * This takes a rendering and decides how to convert\r\n * it into a React element. It will either match a\r\n * React component within the component map or we will\r\n * use the MVC rendered html and convert those tags to\r\n * React components.\r\n */\r\nexport function CreateRendering({\r\n    rendering,\r\n    placeholderKey,\r\n    renderingContext,\r\n    index,\r\n}: CreateRenderingProps) {\r\n    const uniformContext = useUniformContext();\r\n    const { logger, componentFactory } = uniformContext;\r\n    if (!rendering) throw new Error('There is no rendering');\r\n    const componentName = rendering.componentName || throwException('impossible');\r\n\r\n    const innerRenderingContext = rendering.renderingContext;\r\n    const datasourceId = rendering.datasource || '00000000000000000000000000000000';\r\n\r\n    // We will look for a React component in the component map.\r\n    const CustomReactComponent = componentFactory(componentName);\r\n\r\n    // Look for Sitecore MVC html or JSON item data for the rendering\r\n    let htmlOrJSON = getHtmlOrJSONFromMap(renderingContext.html, rendering, datasourceId);\r\n\r\n    if (CustomReactComponent) {\r\n        logger.debug(`Found a React component for ${componentName}`);\r\n        // We have a React component\r\n        if (isJSONRendering(htmlOrJSON)) {\r\n            innerRenderingContext.item = JSON.parse(htmlOrJSON);\r\n        }\r\n        const newProps = {\r\n            key: rendering.id,\r\n            index,\r\n            renderingContext: innerRenderingContext,\r\n        };\r\n\r\n        logger.debug('Rendering component ' + rendering.componentName + ' (pure react)');\r\n        return React.createElement(CustomReactComponent, newProps);\r\n    } else if (isLayoutHtmlWithBody(htmlOrJSON)) {\r\n        logger.debug('Layout with body', htmlOrJSON);\r\n        return (\r\n            <>\r\n                <Head>\r\n                    <UniformContextProvider {...uniformContext}>\r\n                        <CreateRenderingFromHtml\r\n                            html={htmlOrJSON.headHtml}\r\n                            renderingContext={innerRenderingContext}\r\n                            rendering={rendering}\r\n                            placeholderKey={placeholderKey}\r\n                            index={index}\r\n                            isHead={false}\r\n                        />\r\n                    </UniformContextProvider>\r\n                </Head>\r\n                <CreateRenderingFromHtml\r\n                    html={htmlOrJSON.bodyHtml}\r\n                    renderingContext={innerRenderingContext}\r\n                    rendering={rendering}\r\n                    placeholderKey={placeholderKey}\r\n                    index={index}\r\n                />\r\n            </>\r\n        );\r\n    } else if (isValidHtmlRendering(htmlOrJSON)) {\r\n        return (\r\n            <CreateRenderingFromHtml\r\n                html={htmlOrJSON}\r\n                renderingContext={innerRenderingContext}\r\n                rendering={rendering}\r\n                placeholderKey={placeholderKey}\r\n                index={index}\r\n            />\r\n        );\r\n    }\r\n\r\n    if (placeholderKey === '/') {\r\n        return <></>;\r\n    }\r\n\r\n    throwException(\r\n        `No r.componentName and no html available for rendering, r: ${rendering.renderingId}, uid: ${\r\n            rendering.id\r\n        }, ds: ${datasourceId}, ${\r\n            rendering.renderingContext.item?.id + ', ' + parseGuid(rendering.renderingContext.item?.id || '')\r\n        }, placeholderKey: ${placeholderKey}`\r\n    );\r\n\r\n    return null;\r\n}\r\n"]}