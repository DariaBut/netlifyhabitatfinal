{"version":3,"file":"CreateRenderingFromHtml.js","sourceRoot":"","sources":["../../../src/processHtml/CreateRenderingFromHtml.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAsD;AACtD,gEAAuF;AACvF,yCAAwC;AAExC,wCAAgD;AAChD,yDAAwD;AAEhD,IAAA,MAAM,GAAK,OAAO,CAAC,eAAe,CAAC,OAA7B,CAA8B;AAY5C;;;;;;;;;;GAUG;AACH,SAAgB,uBAAuB,CAAC,EAQT;QAP3B,IAAI,UAAA,EACJ,gBAAgB,sBAAA,EAChB,SAAS,eAAA,EACT,cAAc,oBAAA,EACd,KAAK,WAAA,EACL,eAAwB,EAAxB,OAAO,mBAAG,eAAK,CAAC,QAAQ,KAAA,EACxB,MAAM,YAAA;IAEA,IAAA,KAAwE,4BAAiB,EAAE,EAAzF,MAAM,YAAA,EAAE,0BAA0B,gCAAA,EAAE,6BAA6B,mCAAwB,CAAC;IAElG,IAAM,QAAQ,GAAG,eAAO,CAAC;QACrB,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QACvB,MAAM,CAAC,KAAK,CACR,yBAAuB,SAAS,CAAC,aAAa,sBAAiB,cAAc,iBAAc,CAC9F,CAAC;QAEF,wCAAwC;QACxC,IAAM,sBAAsB,GAAG;YAC3B,MAAM;gBACF,CAAC,CAAC,yCAAsB,EAAE;gBAC1B,CAAC,CAAC,mCAAgB,CAAC,yBAAW,EAAE,SAAS,EAAE,KAAK,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,CAAC;WAC5F,0BAA0B,EAC/B,MAAM,CAAC,OAAO,CAAC,CAAC;QAElB,OAAO,IAAI,MAAM,EAAE,CAAC,qBAAqB,CACrC,qBAAS,CAAC,IAAI,CAAC,EACf,cAAM,OAAA,IAAI,EAAJ,CAAI,EACV,sBAAsB,EACtB,6BAA6B,CAChC,CAAC;IACN,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,MAAM,CAAC,KAAK,CAAC,sBAAsB,GAAG,SAAS,CAAC,aAAa,GAAG,YAAY,CAAC,CAAC;IAE9E,OAAO,QAAQ,CAAC,CAAC,CAAC,8BAAC,OAAO,QAAE,QAAQ,CAAW,CAAC,CAAC,CAAC,IAAI,CAAC;AAC3D,CAAC;AAnCD,0DAmCC","sourcesContent":["import React, { ComponentType, useMemo } from 'react';\r\nimport { buildPlaceholder, buildRemovePlaceholder } from './elements/buildPlaceholder';\r\nimport { cleanHtml } from './cleanHtml';\r\nimport { RenderingContext, RenderingNode } from '@uniformdev/common-client';\r\nimport { useUniformContext } from '../contexts';\r\nimport { Placeholder } from '../components/Placeholder';\r\n\r\nconst { Parser } = require('html-to-react');\r\n\r\ninterface CreateRenderingFromHtmlProps {\r\n    html?: string;\r\n    renderingContext: RenderingContext;\r\n    rendering: RenderingNode;\r\n    placeholderKey: string;\r\n    index: number;\r\n    isHead?: boolean;\r\n    Wrapper?: ComponentType;\r\n}\r\n\r\n/**\r\n * This will take HTML to convert into React elements.\r\n *\r\n * It memoizes the output based on the html string so\r\n * it only does the expensive work of converting when\r\n * that changes.\r\n *\r\n * It doesn't support having placeholders in the Head\r\n * because we lose the UniformContext when inside for\r\n * some reason.\r\n */\r\nexport function CreateRenderingFromHtml({\r\n    html,\r\n    renderingContext,\r\n    rendering,\r\n    placeholderKey,\r\n    index,\r\n    Wrapper = React.Fragment,\r\n    isHead,\r\n}: CreateRenderingFromHtmlProps) {\r\n    const { logger, htmlProcessingInstructions, htmlPreProcessingInstructions } = useUniformContext();\r\n\r\n    const rendered = useMemo(() => {\r\n        if (!html) return null;\r\n        logger.debug(\r\n            `Rendering component ${rendering.componentName} from html in ${placeholderKey} placeholder`\r\n        );\r\n\r\n        // The order below can make a difference\r\n        const processingInstructions = [\r\n            isHead\r\n                ? buildRemovePlaceholder()\r\n                : buildPlaceholder(Placeholder, rendering, index, placeholderKey, renderingContext, logger),\r\n            ...htmlProcessingInstructions,\r\n        ].filter(Boolean);\r\n\r\n        return new Parser().parseWithInstructions(\r\n            cleanHtml(html),\r\n            () => true,\r\n            processingInstructions,\r\n            htmlPreProcessingInstructions\r\n        );\r\n    }, [html]);\r\n    logger.debug('Rendering component ' + rendering.componentName + ' from html');\r\n\r\n    return rendered ? <Wrapper>{rendered}</Wrapper> : null;\r\n}\r\n"]}