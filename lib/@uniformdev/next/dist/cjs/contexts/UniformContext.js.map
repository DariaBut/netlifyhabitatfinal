{"version":3,"file":"UniformContext.js","sourceRoot":"","sources":["../../../src/contexts/UniformContext.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAuF;AAGvF,8CAIwB;AAwBX,QAAA,cAAc,GAAG,eAAK,CAAC,aAAa,CAA0B,IAAK,CAAC,CAAC;AACrE,QAAA,iBAAiB,GAAG;IAC7B,IAAM,KAAK,GAAG,kBAAU,CAAC,sBAAc,CAAC,CAAC;IACzC,IAAI,KAAK,KAAK,IAAI,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;KAChF;IACD,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,SAAgB,sBAAsB,CAAC,EAMT;QAL1B,QAAQ,cAAA,EACR,MAAM,YAAA,EACN,YAAY,kBAAA,EACZ,0BAA0B,gCAAA,EAC1B,6BAA6B,mCAAA;IAEvB,IAAA,KAAA,OAAoB,gBAAQ,CAAsB;QACpD,YAAY,cAAA;QACZ,MAAM,QAAA;QACN,0BAA0B,4BAAA;QAC1B,6BAA6B,+BAAA;KAChC,CAAC,IAAA,EALK,KAAK,QAAA,EAAE,QAAQ,QAKpB,CAAC;IACH,IAAM,KAAK,GAAG,eAAO,CAAC;QAClB,IAAM,UAAU,GAAG,UAAC,QAAsC;YACtD,QAAQ,uBACD,KAAK,GACL,QAAQ,EACb,CAAC;QACP,CAAC,CAAC;QACF,IAAM,eAAe,GAAG,UAAC,YAA0B,IAAK,OAAA,UAAU,CAAC,EAAE,YAAY,cAAA,EAAE,CAAC,EAA5B,CAA4B,CAAC;QACrF,IAAM,gBAAgB,GAAG,UAAC,aAAqB;YAC3C,OAAA,KAAK,CAAC,YAAY,CAAC,aAAa,CAAC;QAAjC,CAAiC,CAAC;QACtC,6BACO,KAAK,KACR,0BAA0B,EAAE,yCAA2B,CAAC,MAAM,EAAE,KAAK,CAAC,0BAA0B,CAAC,EACjG,6BAA6B,EAAE,KAAK,CAAC,6BAA6B,IAAI,EAAE,EACxE,eAAe,iBAAA;YACf,gBAAgB,kBAAA,IAClB;IACN,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IACZ,OAAO,8BAAC,sBAAc,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK,IAAG,QAAQ,CAA2B,CAAC;AACvF,CAAC;AAhCD,wDAgCC","sourcesContent":["import React, { ComponentType, ReactNode, useContext, useMemo, useState } from 'react';\r\nimport { ComponentMap, UniformContextProps } from '@uniformdev/common-client';\r\nimport { Logger } from '@uniformdev/common';\r\nimport {\r\n    HtmlProcessingInstruction,\r\n    HtmlPreProcessingInstruction,\r\n    buildProcessingInstructions,\r\n} from '../processHtml';\r\n\r\ninterface UniformContextState {\r\n    componentMap: ComponentMap;\r\n    logger: Logger;\r\n    htmlProcessingInstructions?: HtmlProcessingInstruction[];\r\n    htmlPreProcessingInstructions?: HtmlPreProcessingInstruction[];\r\n}\r\n\r\ninterface UniformContextProviderProps {\r\n    componentMap: ComponentMap;\r\n    logger: Logger;\r\n    htmlProcessingInstructions?: HtmlProcessingInstruction[];\r\n    htmlPreProcessingInstructions?: HtmlPreProcessingInstruction[];\r\n    children?: ReactNode;\r\n}\r\n\r\ninterface UniformContextHookValue extends UniformContextProps {\r\n    htmlProcessingInstructions: HtmlProcessingInstruction[];\r\n    htmlPreProcessingInstructions: HtmlPreProcessingInstruction[];\r\n    setComponentMap: (componentMap: ComponentMap) => void;\r\n    componentFactory: (componentName: string) => ComponentType | null;\r\n}\r\n\r\nexport const UniformContext = React.createContext<UniformContextHookValue>(null!);\r\nexport const useUniformContext = (): UniformContextHookValue => {\r\n    const value = useContext(UniformContext);\r\n    if (value === null) {\r\n        throw new Error('Cannot useUniformContext without a UniformContextProvider');\r\n    }\r\n    return value;\r\n};\r\n\r\nexport function UniformContextProvider({\r\n    children,\r\n    logger,\r\n    componentMap,\r\n    htmlProcessingInstructions,\r\n    htmlPreProcessingInstructions,\r\n}: UniformContextProviderProps) {\r\n    const [state, setState] = useState<UniformContextState>({\r\n        componentMap,\r\n        logger,\r\n        htmlProcessingInstructions,\r\n        htmlPreProcessingInstructions,\r\n    });\r\n    const value = useMemo((): UniformContextHookValue => {\r\n        const patchState = (newState: Partial<UniformContextProps>) => {\r\n            setState({\r\n                ...state,\r\n                ...newState,\r\n            });\r\n        };\r\n        const setComponentMap = (componentMap: ComponentMap) => patchState({ componentMap });\r\n        const componentFactory = (componentName: string): ComponentType | null =>\r\n            state.componentMap[componentName];\r\n        return {\r\n            ...state,\r\n            htmlProcessingInstructions: buildProcessingInstructions(logger, state.htmlProcessingInstructions),\r\n            htmlPreProcessingInstructions: state.htmlPreProcessingInstructions || [],\r\n            setComponentMap,\r\n            componentFactory,\r\n        };\r\n    }, [state]);\r\n    return <UniformContext.Provider value={value}>{children}</UniformContext.Provider>;\r\n}\r\n"]}