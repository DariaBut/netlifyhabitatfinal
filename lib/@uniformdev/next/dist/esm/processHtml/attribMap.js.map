{"version":3,"file":"attribMap.js","sourceRoot":"","sources":["../../../src/processHtml/attribMap.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAIA,IAAM,SAAS,GAAoC;IAC/C,OAAO,EAAE,UAAC,WAAW,IAAK,OAAA,CAAC,SAAS,EAAE,cAAM,OAAA,IAAI,CAAC,WAAW,CAAC,EAAjB,CAAiB,CAAC,EAApC,CAAoC;IAC9D,IAAI,EAAE,UAAC,WAAW,EAAE,IAAI,EAAE,MAAM;QAC5B,IAAI,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAClC,MAAM,CAAC,IAAI,CAAC,0CAAwC,IAAI,CAAC,IAAM,CAAC,CAAC;YACjE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;SACxB;aAAM;YACH,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;SAChC;IACL,CAAC;CACJ,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,IAAM,cAAc,GAAG,UAAC,IAAS,EAAE,MAAc;IACpD,IAAI,IAAI,CAAC,OAAO,EAAE;QACd,KAAK,IAAM,GAAG,IAAI,IAAI,CAAC,OAAO,EAAE;YAC5B,IAAI;gBACA,IAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC5C,IAAI,MAAM,EAAE;oBACF,IAAA,KAAA,OAAqB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,IAAA,EAA3D,SAAS,QAAA,EAAE,KAAK,QAA2C,CAAC;oBACnE,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACzB,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;iBACnC;qBAAM;oBACH,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;iBACpD;aACJ;YAAC,OAAO,EAAE,EAAE;gBACT,MAAM,CAAC,KAAK,CAAC,sBAAsB,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;aAC5D;SACJ;KACJ;AACL,CAAC,CAAC","sourcesContent":["import { Logger } from '@uniformdev/common';\r\n\r\ntype AttribMapper = (attribValue: any, node: any, logger: Logger) => [string, any];\r\n\r\nconst attribMap: { [key: string]: AttribMapper } = {\r\n    onclick: (attribValue) => ['onClick', () => eval(attribValue)],\r\n    href: (attribValue, node, logger) => {\r\n        if (/^javascript:/.test(attribValue)) {\r\n            logger.warn(`Changed javascript:void to # on node ${node.name}`);\r\n            return ['href', '#'];\r\n        } else {\r\n            return ['href', attribValue];\r\n        }\r\n    },\r\n};\r\n\r\n/**\r\n * Convert the attributes on any node based on the\r\n * attribMap above.\r\n */\r\nexport const convertAttribs = (node: any, logger: Logger) => {\r\n    if (node.attribs) {\r\n        for (const key in node.attribs) {\r\n            try {\r\n                const mapper = attribMap[key.toLowerCase()];\r\n                if (mapper) {\r\n                    const [newAttrib, value] = mapper(node.attribs[key], node, logger);\r\n                    delete node.attribs[key];\r\n                    node.attribs[newAttrib] = value;\r\n                } else {\r\n                    node.attribs[key] = decodeURI(node.attribs[key]);\r\n                }\r\n            } catch (ex) {\r\n                logger.debug('ERROR DECODING URI: ' + node.attribs[key]);\r\n            }\r\n        }\r\n    }\r\n};\r\n"]}