{"version":3,"file":"buildInputTags.js","sourceRoot":"","sources":["../../../../src/processHtml/elements/buildInputTags.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,kBAAkB,EAAE,MAAM,6BAA6B,CAAC;AAEjE;;GAEG;AACH,MAAM,CAAC,IAAM,cAAc,GAAG,cAAmC,OAAA;IAC7D,WAAW;IACX;QACI,iBAAiB,EAAE,UAAU,IAAI;YAC7B,OAAO,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,UAAU,CAAC;QACrE,CAAC;QACD,WAAW,EAAE,UAAU,IAAS;YAC5B,2DAA2D;YAC3D,IAAM,QAAQ,gBAAQ,IAAI,CAAC,OAAO,CAAE,CAAC;YAErC,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAC9D,IAAI,OAAO,EAAE;gBACT,8BAA8B;gBAC9B,OAAO,QAAQ,CAAC,OAAO,CAAC;gBACxB,yBAAyB;gBACzB,QAAQ,CAAC,gBAAgB,CAAC,GAAG,OAAO,CAAC;aACxC;YAED,OAAO,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,eAAO,QAAQ,EAAG,CAAC;QAC3D,CAAC;KACJ;IACD,+BAA+B;IAC/B;QACI,iBAAiB,EAAE,UAAU,IAAI;YAC7B,OAAO,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;QACjC,CAAC;QACD,WAAW,EAAE,UAAU,IAAI,EAAE,QAAQ,EAAE,KAAK;YACxC,yCAAyC;YACzC,qGAAqG;YAErG,wBAAwB;YAExB,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YAC3D,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YAC1B,8BAA8B;YAE9B,oBAAoB;YACpB,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC/C,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YAE1B,4BAA4B;YAE5B,OAAO,kBAAkB,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC;KACJ;CACJ,EA7CgE,CA6ChE,CAAC","sourcesContent":["import { HtmlProcessingInstruction } from '../HtmlProcessingInstruction';\r\nimport React from 'react';\r\nimport { processDefaultNode } from './buildDefaultNodeProcessor';\r\n\r\n/**\r\n * Form input tag processors\r\n */\r\nexport const buildInputTags = (): HtmlProcessingInstruction[] => [\r\n    // Checkbox\r\n    {\r\n        shouldProcessNode: function (node) {\r\n            return node.name === 'input' && node.attribs.type === 'checkbox';\r\n        },\r\n        processNode: function (node: any) {\r\n            //console.log(\"processing input with 'checked' attribute\");\r\n            const newAttrs = { ...node.attribs };\r\n\r\n            const checked = Object.keys(node.attribs).includes('checked');\r\n            if (checked) {\r\n                // removing the original value\r\n                delete newAttrs.checked;\r\n                // setting defaultChecked\r\n                newAttrs['defaultChecked'] = checked;\r\n            }\r\n\r\n            return React.createElement(node.name, { ...newAttrs });\r\n        },\r\n    },\r\n    // Any other input with a value\r\n    {\r\n        shouldProcessNode: function (node) {\r\n            return node.name === 'input';\r\n        },\r\n        processNode: function (node, children, index) {\r\n            //var inputValue = node.attribs['value'];\r\n            //console.log('processing input id ' + node.attribs[\"id\"] + ' with value attribute = ' + inputValue);\r\n\r\n            // setting default value\r\n\r\n            node.attribs['defaultValue'] = node.attribs['value'] || '';\r\n            delete node.attribs.value;\r\n            // removing the original value\r\n\r\n            // setting className\r\n            node.attribs.className = node.attribs['class'];\r\n            delete node.attribs.class;\r\n\r\n            //console.log(node.attribs);\r\n\r\n            return processDefaultNode(node, children, index);\r\n        },\r\n    },\r\n];\r\n"]}