{"version":3,"file":"Field.js","sourceRoot":"","sources":["../../../src/components/Field.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { PageItem, DataSourceItem } from '@uniformdev/common-client';\r\n// import { documentToHtmlString } from '@contentful/rich-text-html-renderer';\r\n// import { BLOCKS } from '@contentful/rich-text-types';\r\n// import { throwException } from '@uniformdev/common';\r\n\r\nexport class Field extends React.Component<{\r\n    item?: DataSourceItem | PageItem | undefined;\r\n    fieldName?: string | undefined;\r\n    fieldValue?: any;\r\n    path?: string | undefined;\r\n    format?: any;\r\n    className?: string;\r\n    tag?: string | undefined;\r\n    prefix?: string | undefined;\r\n    suffix?: string | undefined;\r\n}> {\r\n    render() {\r\n        const props: any = this.props;\r\n        const {\r\n            item,\r\n            fieldName,\r\n            fieldValue,\r\n            path,\r\n            format,\r\n            tag,\r\n            className,\r\n            prefix,\r\n            suffix,\r\n            ...otherProps\r\n        } = props;\r\n\r\n        if (item && fieldName && fieldValue) {\r\n            throw new Error(\r\n                'The Field component cannot accept both (at the same time) \"fieldValue\" and a pair of \"item\" and \"fieldName\" attributes. Props: ' +\r\n                    JSON.stringify(this.props)\r\n            );\r\n        } else if (item && !fieldName) {\r\n            throw new Error(\r\n                'When \"item\" value is specified, the Field component cannot act without \"fieldName\" attribute. Props: ' +\r\n                    JSON.stringify(props)\r\n            );\r\n        }\r\n\r\n        const htmlProps = {\r\n            ...otherProps,\r\n        };\r\n\r\n        let value = fieldValue || (!item || !fieldName ? '' : item.fields[fieldName.toLowerCase()]);\r\n\r\n        if (path) {\r\n            path.split('.').forEach((word: any) => {\r\n                value = value && value[word];\r\n            });\r\n        }\r\n\r\n        if (value) {\r\n            switch ((format || '').toLowerCase()) {\r\n                case 'date':\r\n                    {\r\n                        const date = new Date(value);\r\n                        const obj: any = date;\r\n                        value = !isNaN(obj) ? date.toDateString() : value;\r\n                    }\r\n                    break;\r\n\r\n                case 'localedate':\r\n                    {\r\n                        const date = new Date(value);\r\n                        const obj: any = date;\r\n                        value = !isNaN(obj) ? date.toLocaleDateString() : value;\r\n                    }\r\n                    break;\r\n\r\n                    // case 'richtext':\r\n                    //     {\r\n                    //         if (!tag)\r\n                    //             throw new Error('Field cannot render richtext format when no tag specified');\r\n\r\n                    //         const options: any = {\r\n                    //             renderNode: {\r\n                    //                 [BLOCKS.EMBEDDED_ASSET]: (node: any) => {\r\n                    //                     const { data } = node || throwException('node is undefined');\r\n                    //                     const { target } = data || throwException('node.data is undefined');\r\n                    //                     const { fields } =\r\n                    //                         target || throwException('node.data.target is undefined');\r\n                    //                     const { file, description, title } =\r\n                    //                         fields || throwException('node.data.target.fields is undefined');\r\n                    //                     const { contentType, url, details } =\r\n                    //                         file || throwException('node.data.target.fields.file is undefined');\r\n                    //                     const { image } =\r\n                    //                         details ||\r\n                    //                         throwException('node.data.target.fields.file.details is undefined');\r\n                    //                     const { height, width } =\r\n                    //                         image ||\r\n                    //                         throwException(\r\n                    //                             'node.data.target.fields.file.details.image is undefined'\r\n                    //                         );\r\n\r\n                    //                     if (!url) throwException('node.data.target.fields.file.url is undefined');\r\n                    //                     if (contentType && contentType.startsWith('image/')) {\r\n                    //                         return `<img src=\"${url}\" height=\"${height || ''}\" width=\"${width ||\r\n                    //                             ''}\" alt=\"${description || title || ''}\"/>`;\r\n                    //                     }\r\n\r\n                    //                     throw new Error(`${contentType} is not supported`);\r\n                    //                 },\r\n                    //             },\r\n                    //         };\r\n                    //         value = documentToHtmlString(value, options);\r\n                    //     }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (value) {\r\n            if (tag === 'img') {\r\n                htmlProps.src = value;\r\n            } else {\r\n                htmlProps.dangerouslySetInnerHTML = {\r\n                    __html: value,\r\n                };\r\n            }\r\n        }\r\n\r\n        if (className) {\r\n            htmlProps['class'] = className;\r\n        }\r\n\r\n        const before = (value && prefix) || '';\r\n        const after = (value && suffix) || '';\r\n        const obj = tag ? React.createElement(tag || 'span', htmlProps, null) : value;\r\n\r\n        return (\r\n            <>\r\n                {before}\r\n                {obj}\r\n                {after}\r\n            </>\r\n        );\r\n    }\r\n}\r\n"]}