{"version":3,"file":"routeUtils.js","sourceRoot":"","sources":["../../src/routeUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,SAAgB,WAAW,CAAC,KAAa;IACrC,IAAI,CAAC,KAAK,EAAE;QACR,OAAO,KAAK,CAAC;KAChB;IAED,6FAA6F;IAC7F,OAAO,0BAA0B,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;AACjE,CAAC;AAPD,kCAOC;AAED,SAAgB,kBAAkB,CAAC,KAAa;IAC5C,IAAM,cAAc,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAI,KAAO,CAAC,CAAC,CAAC,KAAK,CAAC;IACpE,OAAO,cAAc,CAAC;AAC1B,CAAC;AAHD,gDAGC;AAED,SAAgB,0BAA0B,CAAC,KAAa;IACpD,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACtC,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;QACnB,IAAM,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;QACtD,OAAO,cAAc,CAAC;KACzB;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAPD,gEAOC;AAOD,SAAgB,aAAa,CAAC,WAAiC,EAAE,kBAAgC;IACrF,IAAA,aAAa,GAAiC,WAAW,cAA5C,EAAE,IAAI,GAA2B,WAAW,KAAtC,EAAK,iBAAiB,UAAK,WAAW,EAA3D,yBAA6C,CAAF,CAAiB;IAElE,wEAAwE;IACxE,0EAA0E;IAC1E,uDAAuD;IACvD,IAAM,aAAa,GAAG,aAAa,IAAI,GAAG,CAAC;IAE3C,sGAAsG;IACtG,IAAM,gBAAgB,GAAG,IAAI,IAAI,kBAAkB,EAAE,CAAC;IAEtD,OAAO;QACH,aAAa,eAAA;QACb,gBAAgB,kBAAA;QAChB,iBAAiB,mBAAA;KACpB,CAAC;AACN,CAAC;AAhBD,sCAgBC","sourcesContent":["export function formatRoute(route: string) {\r\n    if (!route) {\r\n        return route;\r\n    }\r\n\r\n    // `removeQueryStringFromRoute` shouldn't be necessary, but we have it as a \"safety\" measure.\r\n    return removeQueryStringFromRoute(ensureLeadingSlash(route));\r\n}\r\n\r\nexport function ensureLeadingSlash(route: string) {\r\n    const formattedRoute = !route.startsWith('/') ? `/${route}` : route;\r\n    return formattedRoute;\r\n}\r\n\r\nexport function removeQueryStringFromRoute(route: string) {\r\n    const queryIndex = route.indexOf('?');\r\n    if (queryIndex !== -1) {\r\n        const formattedRoute = route.substring(0, queryIndex);\r\n        return formattedRoute;\r\n    }\r\n    return route;\r\n}\r\n\r\nexport interface RouteParams {\r\n    sitecoreRoute: string;\r\n    lang: string;\r\n}\r\n\r\nexport function resolveParams(routeParams: Partial<RouteParams>, getCurrentLanguage: () => string) {\r\n    const { sitecoreRoute, lang, ...queryStringParams } = routeParams;\r\n\r\n    // `sitecoreRoute` param may be undefined when the current URL is `/` or\r\n    // when the current URL is just a language parameter, e.g. `/en`, `/nl-NL`\r\n    // In those scenarios, we default to `/` for the route.\r\n    const resolvedRoute = sitecoreRoute || '/';\r\n\r\n    // determine language by route first, then by \"state\" (i18n.language), else fallback to default config\r\n    const resolvedLanguage = lang || getCurrentLanguage();\r\n\r\n    return {\r\n        resolvedRoute,\r\n        resolvedLanguage,\r\n        queryStringParams,\r\n    };\r\n}\r\n"]}