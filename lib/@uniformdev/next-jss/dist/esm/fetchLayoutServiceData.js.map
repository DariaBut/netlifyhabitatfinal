{"version":3,"file":"fetchLayoutServiceData.js","sourceRoot":"","sources":["../../src/fetchLayoutServiceData.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,kCAAkC,CAAC;AAC3D,OAAO,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAE3C,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAEvD,OAAO,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAQvD,MAAM,UAAU,sBAAsB,CAClC,KAAa,EACb,QAAgB,EAChB,EAA0F;IAAxF,IAAA,GAAG,SAAA,EAAE,mBAAmB,yBAAA,EAAE,iBAAiB,uBAAA,EAAK,OAAO,cAAzD,mDAA2D,CAAF;IAEzD,IAAM,MAAM,GAAG,mBAAmB,EAAE,CAAC;IAErC,6DAA6D;IAC7D,IAAM,YAAY,cACd,mBAAmB,aACf,IAAI,EAAE,MAAM,CAAC,eAAe,IACzB,mBAAmB,GAE1B,iBAAiB,aACb,OAAO,EAAE,QAAQ,EACjB,SAAS,EAAE,MAAM,CAAC,cAAc,EAChC,OAAO,EAAE,MAAM,CAAC,gBAAgB,IAC7B,iBAAiB,GAExB,OAAO,EAAE,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,WAAW,KAAI,WAAW,IACrC,OAAO,CACb,CAAC;IAEF,IAAM,cAAc,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IAE1C,OAAO,OAAO,CAAC,cAAc,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;QACpE,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;YACxE,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;SAC9B;QAED,OAAO,CAAC,KAAK,CAAC,uCAAqC,cAAgB,EAAE,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;QAE/F,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { dataApi } from '@sitecore-jss/sitecore-jss-react';\r\nimport { formatRoute } from './routeUtils';\r\nimport { UniformEnvironment } from './interfaces';\r\nimport { dataFetcher } from './dataFetcher';\r\nimport { getNextServerConfig } from '@uniformdev/next';\r\n\r\nimport { errorToJsonObject } from '@uniformdev/common';\r\n\r\nexport interface FetchLayoutServiceDataOptions {\r\n    env: UniformEnvironment;\r\n    layoutServiceConfig: any;\r\n    queryStringParams: any;\r\n}\r\n\r\nexport function fetchLayoutServiceData(\r\n    route: string,\r\n    language: string,\r\n    { env, layoutServiceConfig, queryStringParams, ...options }: FetchLayoutServiceDataOptions\r\n) {\r\n    const config = getNextServerConfig();\r\n\r\n    // allow devs to override default options with custom options\r\n    const fetchOptions = {\r\n        layoutServiceConfig: {\r\n            host: config.sitecoreApiHost,\r\n            ...layoutServiceConfig,\r\n        },\r\n        querystringParams: {\r\n            sc_lang: language,\r\n            sc_apikey: config.sitecoreApiKey,\r\n            sc_site: config.sitecoreSiteName,\r\n            ...queryStringParams,\r\n        },\r\n        fetcher: env?.dataFetcher || dataFetcher,\r\n        ...options,\r\n    };\r\n\r\n    const formattedRoute = formatRoute(route);\r\n\r\n    return dataApi.fetchRouteData(formattedRoute, fetchOptions).catch((error) => {\r\n        if (error.response && error.response.status === 404 && error.response.data) {\r\n            return error.response.data;\r\n        }\r\n\r\n        console.error(`Route data fetch error for route: ${formattedRoute}`, errorToJsonObject(error));\r\n\r\n        return null;\r\n    });\r\n}\r\n"]}