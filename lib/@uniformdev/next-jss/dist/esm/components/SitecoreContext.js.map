{"version":3,"file":"SitecoreContext.js","sourceRoot":"","sources":["../../../src/components/SitecoreContext.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAa,UAAU,EAAE,MAAM,OAAO,CAAC;AACrD,OAAO,KAAK,gBAAgB,MAAM,kCAAkC,CAAC;AAE7D,IAAA,2BAA2B,GAAK,gBAAgB,4BAArB,CAAsB;AACzD,IAAM,iBAAiB,GAAQ,gBAAgB,CAAC;AAEhD;;;;;;;;;;EAUE;AACF,IAAM,cAAc,GAChB,OAAO,iBAAiB,CAAC,sBAAsB,KAAK,WAAW;IAC3D,CAAC,CAAC,IAAI,iBAAiB,CAAC,sBAAsB,EAAE;IAChD,CAAC,CAAC,IAAI,CAAC;AAEf,MAAM,CAAC,IAAM,kBAAkB,GAAG;IAC9B,IAAM,eAAe,GAAG,UAAU,CAAC,2BAA2B,CAAC,CAAC;IAChE,kDAAkD;IAClD,IAAI,OAAQ,eAAuB,CAAC,kBAAkB,KAAK,UAAU,EAAE;QACnE,OAAQ,eAAuB,CAAC,kBAAkB,EAAE,CAAC;KACxD;SAAM;QACH,OAAO,eAAe,CAAC,OAAO,CAAC;KAClC;AACL,CAAC,CAAC;AAEF,MAAM,UAAU,eAAe,CAAC,EAA+C;QAA7C,gBAAgB,sBAAA,EAAE,QAAQ,cAAA,EAAE,UAAU,gBAAA;IACpE,IAAM,WAAW,GAAG;QAChB,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;KACf,CAAC;IAEF,IAAI,UAAU,IAAI,UAAU,CAAC,QAAQ,EAAE;QACnC,WAAW,CAAC,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC9C,WAAW,CAAC,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,KAAK,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;QACnF,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;KAC3D;IAED,IAAI,cAAc,EAAE;QAChB,OAAO,CACH,oBAAC,qBAAqB,IAAC,WAAW,EAAE,WAAW,EAAE,gBAAgB,EAAE,gBAAgB,IAC9E,QAAQ,CACW,CAC3B,CAAC;KACL;SAAM;QACH,OAAO,CACH,oBAAC,qBAAqB,IAAC,WAAW,EAAE,WAAW,EAAE,gBAAgB,EAAE,gBAAgB,IAC9E,QAAQ,CACW,CAC3B,CAAC;KACL;AACL,CAAC;AAQD,SAAS,qBAAqB,CAAC,EAA2E;QAAzE,WAAW,iBAAA,EAAE,gBAAgB,sBAAA,EAAE,QAAQ,cAAA;IACpE,IAAI,cAAc,EAAE;QAChB,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;QACpE,cAAc,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;KAClD;IACD,cAAc,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IAE/C,OAAO,CACH,oBAAC,iBAAiB,CAAC,eAAe,IAC9B,gBAAgB,EAAE,gBAAgB,EAClC,cAAc,EAAE,cAAc,IAE7B,QAAQ,CACuB,CACvC,CAAC;AACN,CAAC;AAED,SAAS,qBAAqB,CAAC,EAA2E;QAAzE,WAAW,iBAAA,EAAE,gBAAgB,sBAAA,EAAE,QAAQ,cAAA;IACpE,OAAO,CACH,oBAAC,gBAAgB,CAAC,eAAe,IAAC,gBAAgB,EAAE,gBAAgB,EAAE,OAAO,EAAE,WAAW,IACrF,QAAQ,CACsB,CACtC,CAAC;AACN,CAAC","sourcesContent":["import React, { ReactNode, useContext } from 'react';\r\nimport * as sitecoreJssReact from '@sitecore-jss/sitecore-jss-react';\r\n\r\nconst { SitecoreContextReactContext } = sitecoreJssReact;\r\nconst sitecoreJssLegacy: any = sitecoreJssReact;\r\n\r\n/*\r\n  In sitecore-jss-react before version 15 the SitecoreContextFactory stores the\r\n  current Sitecore context for the app.\r\n\r\n  For example, whether the page is currently being edited, or the current language.\r\n  Note that the export makes this essentially a singleton, so we can store state in it.\r\n\r\n  The Sitecore context is generally updated on route change (/src/index.js).\r\n  The `withSitecoreContext()` higher order component from `sitecore-jss-react`\r\n  can be used to access the context from within a component.\r\n*/\r\nconst contextFactory =\r\n    typeof sitecoreJssLegacy.SitecoreContextFactory !== 'undefined'\r\n        ? new sitecoreJssLegacy.SitecoreContextFactory()\r\n        : null;\r\n\r\nexport const useSitecoreContext = () => {\r\n    const sitecoreContext = useContext(SitecoreContextReactContext);\r\n    // Check to see if we are using the legacy factory\r\n    if (typeof (sitecoreContext as any).getSitecoreContext === 'function') {\r\n        return (sitecoreContext as any).getSitecoreContext();\r\n    } else {\r\n        return sitecoreContext.context;\r\n    }\r\n};\r\n\r\nexport function SitecoreContext({ componentFactory, children, layoutData }: any) {\r\n    const contextData = {\r\n        route: null,\r\n        itemId: null,\r\n    };\r\n\r\n    if (layoutData && layoutData.sitecore) {\r\n        contextData.route = layoutData.sitecore.route;\r\n        contextData.itemId = layoutData.sitecore.route && layoutData.sitecore.route.itemId;\r\n        Object.assign(contextData, layoutData.sitecore.context);\r\n    }\r\n\r\n    if (contextFactory) {\r\n        return (\r\n            <LegacySitecoreContext contextData={contextData} componentFactory={componentFactory}>\r\n                {children}\r\n            </LegacySitecoreContext>\r\n        );\r\n    } else {\r\n        return (\r\n            <LatestSitecoreContext contextData={contextData} componentFactory={componentFactory}>\r\n                {children}\r\n            </LatestSitecoreContext>\r\n        );\r\n    }\r\n}\r\n\r\ninterface NormalisedSitecoreContextProps {\r\n    contextData: any;\r\n    componentFactory: any;\r\n    children: ReactNode;\r\n}\r\n\r\nfunction LegacySitecoreContext({ contextData, componentFactory, children }: NormalisedSitecoreContextProps) {\r\n    if (contextFactory) {\r\n        console.log('Setting contextData on legacy SitecoreContextFactory');\r\n        contextFactory.setSitecoreContext(contextData);\r\n    }\r\n    contextFactory.setSitecoreContext(contextData);\r\n\r\n    return (\r\n        <sitecoreJssLegacy.SitecoreContext\r\n            componentFactory={componentFactory}\r\n            contextFactory={contextFactory}\r\n        >\r\n            {children}\r\n        </sitecoreJssLegacy.SitecoreContext>\r\n    );\r\n}\r\n\r\nfunction LatestSitecoreContext({ contextData, componentFactory, children }: NormalisedSitecoreContextProps) {\r\n    return (\r\n        <sitecoreJssReact.SitecoreContext componentFactory={componentFactory} context={contextData}>\r\n            {children}\r\n        </sitecoreJssReact.SitecoreContext>\r\n    );\r\n}\r\n"]}