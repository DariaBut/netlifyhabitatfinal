{"version":3,"file":"AzurePublishProvider.js","sourceRoot":"","sources":["../../src/AzurePublishProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import azure from 'azure-storage';\r\nimport { throwException, trimEnd, replace, getEnv } from '@uniformdev/common';\r\nimport {\r\n    serverLogger,\r\n    PublishProviderWithLocalJsonDatabase,\r\n    PublishProviderOptions,\r\n} from '@uniformdev/common-server';\r\n\r\nimport util from 'util';\r\nimport child_process from 'child_process';\r\nconst exec = util.promisify(child_process.exec);\r\n\r\nimport { join } from 'path';\r\nimport { existsSync, readdirSync, Stats, statSync } from 'fs';\r\n\r\nexport type AzureBlobSite = {\r\n    url: string;\r\n};\r\n\r\nexport class AzurePublishProvider extends PublishProviderWithLocalJsonDatabase<AzureBlobSite> {\r\n    private readonly azureTargetUrlWithSAS: string;\r\n    private readonly container: string;\r\n    private readonly blobService: azure.BlobService;\r\n    private readonly connectionString: string;\r\n    private readonly accessKey: string;\r\n    private readonly accountName: string;\r\n    private readonly azcopyPath: any;\r\n    private readonly azureFallbackEnabled: string;\r\n\r\n    get behavior(): 'replace-on-deploy' | 'update-on-deploy' {\r\n        return 'update-on-deploy';\r\n    }\r\n\r\n    constructor({ config, logger = serverLogger }: PublishProviderOptions) {\r\n        super(getEnv(config.env, 'AZURE_FILE', 'azure.config.json'), logger);\r\n        logger.info('Initializing AzurePublishProvider');\r\n\r\n        this.container = getEnv(config.env, 'AZURE_CONTAINER');\r\n        this.connectionString = getEnv(config.env, 'AZURE_STORAGE_CONNECTION_STRING', '');\r\n        this.accessKey = getEnv(config.env, 'AZURE_STORAGE_ACCESS_KEY', '');\r\n        this.accountName = getEnv(config.env, 'AZURE_STORAGE_ACCOUNT', '');\r\n        this.azureTargetUrlWithSAS = getEnv(config.env, 'AZURE_TARGET_URL_WITH_SAS', '');\r\n        this.azureFallbackEnabled = getEnv(config.env, 'AZURE_FALLBACK_ENABLED', '1');\r\n\r\n        const az1 = getEnv(config.env, 'AZCOPY_PATH', '');\r\n        const az2 = getEnv(config.env, 'UNIFORM_PUBLISH_PROVIDER_AZUREBLOB_AZCOPY_PATH', '');\r\n        if (az1 && az2) {\r\n            throw new Error(\r\n                'Both AZCOPY_PATH and UNIFORM_PUBLISH_PROVIDER_AZUREBLOB_AZCOPY_PATH are defined which is not supported, only one can be defined at a time.'\r\n            );\r\n        }\r\n\r\n        let azcopyPath = az1;\r\n        if (azcopyPath) {\r\n            if (!existsSync(azcopyPath)) {\r\n                throw new Error(\r\n                    'The AZCOPY_PATH env variable points to file that does not exist: ' + azcopyPath\r\n                );\r\n            }\r\n        } else {\r\n            azcopyPath = az2;\r\n            if (azcopyPath) {\r\n                if (!existsSync(azcopyPath)) {\r\n                    throw new Error(\r\n                        'The UNIFORM_PUBLISH_PROVIDER_AZUREBLOB_AZCOPY_PATH env variable points to file that does not exist: ' +\r\n                            azcopyPath\r\n                    );\r\n                }\r\n            } else {\r\n                throw new Error(\r\n                    'Neither AZCOPY_PATH nor UNIFORM_PUBLISH_PROVIDER_AZUREBLOB_AZCOPY_PATH are defined, at least one of them must be defined.'\r\n                );\r\n            }\r\n        }\r\n\r\n        this.azcopyPath = azcopyPath;\r\n\r\n        this.blobService = this.createBlobService() || throwException('FATAL Cannot create blob service');\r\n    }\r\n\r\n    private createBlobService(): azure.BlobService {\r\n        if (this.connectionString) {\r\n            return azure.createBlobService(this.connectionString);\r\n        }\r\n        if (this.accessKey && this.accountName) {\r\n            return azure.createBlobService(this.accountName, this.accessKey);\r\n        }\r\n        return azure.createBlobService();\r\n    }\r\n\r\n    private async enableWebSite(): Promise<void> {\r\n        const blobService = this.blobService;\r\n\r\n        try {\r\n            await new Promise((resolve, reject) => {\r\n                blobService.setServiceProperties(\r\n                    { StaticWebsite: { Enabled: true, IndexDocument: 'index.html' } },\r\n                    (error) => {\r\n                        if (error) reject(error);\r\n                        resolve({ message: 'Site was enabled.' });\r\n                    }\r\n                );\r\n            }).then((result: any) => this.logger.info(result));\r\n        } catch (error) {\r\n            this.logger.error(error);\r\n        }\r\n    }\r\n\r\n    private async createContainerIfNotExist(): Promise<void> {\r\n        const blobService = this.blobService;\r\n        const container = this.container;\r\n\r\n        try {\r\n            await new Promise((resolve, reject) => {\r\n                blobService.createContainerIfNotExists(container, { publicAccessLevel: 'private' }, (err) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve({ message: `Container '${container}' created` });\r\n                    }\r\n                });\r\n            }).then((result: any) => this.logger.info(result));\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async deploy(rootPath: string): Promise<void> {\r\n        rootPath = trimEnd(rootPath, '/');\r\n        rootPath = trimEnd(rootPath, '\\\\');\r\n        await this.createContainerIfNotExist();\r\n        await this.enableWebSite();\r\n\r\n        const container = this.container;\r\n        const logger = this.logger;\r\n\r\n        const target = await this.createAuthenticatedContainerUrl(container);\r\n\r\n        logger.info(`Start uploading file to azure. container: ${this.container}, folder: ${rootPath}`);\r\n\r\n        try {\r\n            await this.deployUsingAzCopy(rootPath, target);\r\n        } catch (err) {\r\n            if (this.azureFallbackEnabled.trim() == '0') {\r\n                throw err;\r\n            }\r\n\r\n            logger.error(`Failed to upload using azcopy, retrying using fallback logic. ${err}`);\r\n\r\n            await this.deployUsingJavaScriptSDK(rootPath);\r\n        }\r\n\r\n        logger.info('AzurePublishProvider deployed site files: ' + rootPath);\r\n    }\r\n\r\n    private async createAuthenticatedContainerUrl(container: string): Promise<string> {\r\n        if (this.azureTargetUrlWithSAS) {\r\n            return this.azureTargetUrlWithSAS;\r\n        }\r\n\r\n        const policy = {\r\n            AccessPolicy: {\r\n                ServiceVersion: '2019-02-02',\r\n                // the order of permissions must be: read add create write delete list\r\n                Permissions:\r\n                    azure.BlobUtilities.SharedAccessPermissions.READ +\r\n                    // @ts-ignore\r\n                    azure.BlobUtilities.SharedAccessPermissions.ADD +\r\n                    // @ts-ignore\r\n                    azure.BlobUtilities.SharedAccessPermissions.CREATE +\r\n                    azure.BlobUtilities.SharedAccessPermissions.WRITE +\r\n                    azure.BlobUtilities.SharedAccessPermissions.DELETE +\r\n                    azure.BlobUtilities.SharedAccessPermissions.LIST,\r\n                Start: new Date(0),\r\n                Expiry: new Date(Date.now() + 10 * 60 * 60 * 1000), // 10h from now\r\n                Protocols: 'https',\r\n            },\r\n        };\r\n\r\n        const sas = this.blobService.generateSharedAccessSignature(container, '', policy);\r\n        const containerUrl = this.blobService.getUrl(container, '', sas);\r\n\r\n        return containerUrl;\r\n    }\r\n\r\n    private async deployUsingAzCopy(source: string, target: string): Promise<void> {\r\n        const sourceIsDir = !source.startsWith('http://') && !source.startsWith('https://');\r\n        const targetIsDir = !target.startsWith('http://') && !target.startsWith('https://');\r\n        if (sourceIsDir && targetIsDir) {\r\n            throw new Error('Both source and target are local directories which is not supported');\r\n        } else if (sourceIsDir) {\r\n            if (!existsSync(source)) {\r\n                throw new Error('The source is a local directory and it does not exit: ' + source);\r\n            } else {\r\n                source = trimEnd(replace(source, '\\\\', '/'), '/') + '/*';\r\n                if (process.platform == 'win32') {\r\n                    source = replace(source, '/', '\\\\');\r\n                }\r\n            }\r\n        } else if (targetIsDir) {\r\n            if (!existsSync(target)) {\r\n                throw new Error('The target is a local directory and it does not exit: ' + target);\r\n            } else {\r\n                target = trimEnd(replace(target, '\\\\', '/'), '/') + '/*';\r\n                if (process.platform == 'win32') {\r\n                    source = replace(source, '/', '\\\\');\r\n                }\r\n            }\r\n        }\r\n\r\n        const command =\r\n            process.platform == 'win32'\r\n                ? `\"${this.azcopyPath}\" copy \"${source}\" \"${target}\" --recursive --overwrite true`\r\n                : `'${this.azcopyPath}' copy '${source}' '${target}' --recursive --overwrite true`;\r\n\r\n        console.log('Exec: ' + command);\r\n        let { stdout, stderr } = await exec(command, {\r\n            cwd: '.',\r\n            maxBuffer: 20 * 1024 * 1024,\r\n        });\r\n\r\n        const message =\r\n            stdout.indexOf('Final Job Status: Completed') >= 0\r\n                ? 'success'\r\n                : 'fail, stdout: ' + stdout + ', stderr: ' + stderr;\r\n\r\n        if (message !== 'success') {\r\n            throw new Error(\r\n                'Exporting has failed. Message: ' + message + ', stdout: ' + stdout + ', stderr: ' + stderr\r\n            );\r\n        }\r\n    }\r\n\r\n    private async deployUsingJavaScriptSDK(rootPath: string) {\r\n        rootPath = trimEnd(rootPath, '/');\r\n        rootPath = trimEnd(rootPath, '\\\\');\r\n\r\n        const blobService = this.blobService;\r\n        const container = this.container;\r\n        const logger = this.logger;\r\n\r\n        logger.info(`Start uploading file to azure. container: ${this.container}, folder: ${rootPath}`);\r\n\r\n        async function walkSync(\r\n            currentDirPath: string,\r\n            callback: (filePath: string, stat?: Stats) => Promise<void>\r\n        ) {\r\n            const files = await readdirSync(currentDirPath);\r\n\r\n            const promises = [];\r\n            for (const file of files) {\r\n                const filePath = join(currentDirPath, file);\r\n                const stat = await statSync(filePath);\r\n                if (stat.isFile()) {\r\n                    promises.push(callback(filePath, stat));\r\n                } else if (stat.isDirectory()) {\r\n                    await walkSync(filePath, callback);\r\n                }\r\n            }\r\n            //wait until all files from directory will be uploaded\r\n            await Promise.all(promises);\r\n        }\r\n\r\n        logger.info(`Start uploading file to azure. container: ${this.container}, folder: ${rootPath}`);\r\n\r\n        await walkSync(rootPath, async function (filePath: string) {\r\n            const localPath = filePath.replace(/\\\\/g, '/');\r\n            const azurePath = localPath.substring(rootPath.length + 1);\r\n\r\n            const createResult: any = await new Promise((resolve, reject) => {\r\n                blobService.createBlockBlobFromLocalFile(container, azurePath, localPath, (error) => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    }\r\n                    resolve(`Uploaded: ${azurePath} (${localPath})`);\r\n                });\r\n            });\r\n\r\n            logger.debug(createResult);\r\n        });\r\n\r\n        logger.info('AzurePublishProvider deployed site files: ' + rootPath);\r\n    }\r\n}\r\n"]}