{"version":3,"file":"fetchWithRetry.js","sourceRoot":"","sources":["../../../src/util/fetchWithRetry.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4DAAqC;AAErC,wBAAoC;AAIpC,SAAsB,cAAc,CAChC,KAAa,EACb,MAAc,EACd,GAAW,EACX,UAAsB,EACtB,OAAgB;IADhB,2BAAA,EAAA,cAAsB;;;;;;oBAGhB,cAAc,GAAG,qBAAU,CAAC,KAAK,CAAC,CAAC;oBAEzC,OAAO,GAAG,OAAO,IAAI,QAAQ,CAAC,UAAM,CAAC,OAAO,CAAC,GAAG,EAAE,0CAA0C,EAAE,OAAO,CAAC,CAAC,CAAC;oBAExG,MAAM,CAAC,KAAK,CACR,kBAAkB;wBACd,GAAG;wBACH,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;wBAChE,aAAa;wBACb,OAAO;wBACP,IAAI,CACX,CAAC;oBACE,QAAQ,GAAG,CAAC,CAAC;oBACF,qBAAM,cAAc,CAAC,GAAG,EAAE;4BACrC,aAAa;4BACb,OAAO,SAAA;4BACP,OAAO,EAAE,UAAU,GAAG,CAAC;4BACvB,OAAO,EAAE,UAAU,OAAe,EAAE,MAAW,EAAE,QAAa;gCAC1D,IAAI,OAAO,IAAI,UAAU,EAAE;oCACvB,OAAO,KAAK,CAAC;iCAChB;gCAED,IAAI,CAAC,QAAQ,EAAE;oCACX,MAAM,CAAC,KAAK,CAAC,mCAAmC,CAAC,CAAC;oCAClD,OAAO,IAAI,CAAC;iCACf;gCAED,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;oCACzB,OAAO,KAAK,CAAC;iCAChB;gCAED,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;oCACzB,OAAO,KAAK,CAAC;iCAChB;gCAED,OAAO,IAAI,CAAC;4BAChB,CAAC;4BACD,UAAU,EAAE,UAAU,OAAY,EAAE,MAAW,EAAE,SAAc;gCAC3D,QAAQ,IAAI,CAAC,CAAC;gCACd,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,mBAAmB;gCAC7D,MAAM,CAAC,IAAI,CAAC,gBAAgB,GAAG,IAAI,GAAG,IAAI,GAAG,UAAU,GAAG,GAAG,CAAC,CAAC;gCAC/D,OAAO,IAAI,CAAC;4BAChB,CAAC;yBACJ,CAAC,EAAA;;oBA9BI,MAAM,GAAG,SA8Bb;oBACF,IAAI,QAAQ,EAAE;wBACV,MAAM,CAAC,IAAI,CAAC,2BAAyB,QAAQ,mBAAc,GAAK,CAAC,CAAC;qBACrE;oBAED,sBAAO,MAAM,EAAC;;;;CACjB;AAxDD,wCAwDC","sourcesContent":["import fetchRetry from 'fetch-retry';\r\n\r\nimport { Logger, getEnv } from '..';\r\n\r\ntype _fetch = typeof fetch;\r\n\r\nexport async function fetchWithRetry(\r\n    fetch: _fetch,\r\n    logger: Logger,\r\n    url: string,\r\n    maxRetries: number = 3,\r\n    timeout?: number\r\n): Promise<Response> {\r\n    const fetchWithRetry = fetchRetry(fetch);\r\n    \r\n    timeout = timeout || parseInt(getEnv(process.env, 'UNIFORM_PUBLISH_PREFETCH_REQUEST_TIMEOUT', '10000'));\r\n\r\n    logger.debug(\r\n        'HTTP request to ' +\r\n            url +\r\n            (maxRetries > 1 ? ' (with max ' + maxRetries + ' retries)' : '') +\r\n            ', timeout: ' +\r\n            timeout +\r\n            'ms'\r\n    );\r\n    let attempts = 0;\r\n    const result = await fetchWithRetry(url, {\r\n        // @ts-ignore\r\n        timeout,\r\n        retries: maxRetries - 1,\r\n        retryOn: function (attempt: number, _error: any, response: any) {\r\n            if (attempt >= maxRetries) {\r\n                return false;\r\n            }\r\n\r\n            if (!response) {\r\n                logger.debug('Keep retrying because no response');\r\n                return true;\r\n            }\r\n\r\n            if (response.status === 200) {\r\n                return false;\r\n            }\r\n\r\n            if (response.status === 404) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n        retryDelay: function (attempt: any, _error: any, _response: any) {\r\n            attempts += 1;\r\n            const wait = Math.pow(2, attempt) * 1000; // 1000, 2000, 4000\r\n            logger.warn('Will retry in ' + wait / 1000 + 's, url: ' + url);\r\n            return wait;\r\n        },\r\n    });\r\n    if (attempts) {\r\n        logger.info(`Url was fetched after ${attempts} attempts: ${url}`);\r\n    }\r\n\r\n    return result;\r\n}\r\n"]}