{"version":3,"file":"tryFormatGuid.js","sourceRoot":"","sources":["../../../src/util/tryFormatGuid.ts"],"names":[],"mappings":";;;AAEA;;;;;;;;;;;;KAYK;AACL,SAAgB,aAAa,CAAC,KAAyB,EAAE,MAAkB;IACvE,IAAI,CAAC,KAAK;QAAE,OAAO,EAAE,CAAC;IAEtB,IAAM,UAAU,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IACvC,QAAQ,MAAM,EAAE;QACZ,KAAK,GAAG;YACJ,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC;QACjC,KAAK,GAAG;YACJ,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC;QACjC,KAAK,GAAG;YACJ,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC;QACjC;YACI,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;KAC1D;AACL,CAAC;AAdD,sCAcC;AAED,SAAS,SAAS,CAAC,KAAa;IAC5B,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAEzC,IAAI,MAAM,CAAC,MAAM,KAAK,EAAE,EAAE;QACtB,OAAO,EAAE,CAAC;KACb;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,SAAS,SAAS,CAAC,KAAa;IAC5B,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACzC,OAAO,KAAK,CAAC;KAChB;IAED,IAAM,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IAC5B,IAAI,CAAC,EAAE;QAAE,OAAO,EAAE,CAAC;IAEnB,OAAU,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,SAAI,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,SAAI,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,SAAI,EAAE,CAAC,SAAS,CACvF,EAAE,EACF,EAAE,CACL,SAAI,EAAE,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAG,CAAC;AAChC,CAAC;AAED,SAAS,SAAS,CAAC,KAAa;IAC5B,IAAI,KAAK,CAAC,MAAM,KAAK,EAAE,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC7D,OAAO,KAAK,CAAC;KAChB;IAED,IAAM,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IAC5B,IAAI,CAAC,EAAE;QAAE,OAAO,EAAE,CAAC;IAEnB,OAAO,MAAI,EAAE,MAAG,CAAC;AACrB,CAAC","sourcesContent":["type GuidFormat = 'N' | 'D' | 'B';\r\n\r\n/**\r\n * Format N\r\n * 32 digits\r\n * 00000000000000000000000000000000\r\n *\r\n * Format D\r\n * 32 digits separated by hyphens\r\n * 00000000-0000-0000-0000-000000000000\r\n *\r\n * Format B\r\n * 32 digits separated by hyphens, enclosed in braces\r\n * {00000000-0000-0000-0000-000000000000}\r\n * */\r\nexport function tryFormatGuid(value: string | undefined, format: GuidFormat): string {\r\n    if (!value) return '';\r\n\r\n    const lowerValue = value.toLowerCase();\r\n    switch (format) {\r\n        case 'N':\r\n            return toFormatN(lowerValue);\r\n        case 'D':\r\n            return toFormatD(lowerValue);\r\n        case 'B':\r\n            return toFormatB(lowerValue);\r\n        default:\r\n            throw new Error('format arg: unknown guid format');\r\n    }\r\n}\r\n\r\nfunction toFormatN(value: string): string {\r\n    let result = value.replace(/[{}-]/g, '');\r\n\r\n    if (result.length !== 32) {\r\n        return '';\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction toFormatD(value: string): string {\r\n    if (value.length === 36 && value[8] === '-') {\r\n        return value;\r\n    }\r\n\r\n    const fN = toFormatN(value);\r\n    if (!fN) return '';\r\n\r\n    return `${fN.substring(0, 8)}-${fN.substring(8, 12)}-${fN.substring(12, 16)}-${fN.substring(\r\n        16,\r\n        20\r\n    )}-${fN.substring(20, 32)}`;\r\n}\r\n\r\nfunction toFormatB(value: string): string {\r\n    if (value.length === 38 && value[0] === '{' && value[9] === '-') {\r\n        return value;\r\n    }\r\n\r\n    const fD = toFormatD(value);\r\n    if (!fD) return '';\r\n\r\n    return `{${fD}}`;\r\n}\r\n"]}