{"version":3,"file":"createConsoleLogger.js","sourceRoot":"","sources":["../../../src/logging/createConsoleLogger.ts"],"names":[],"mappings":"AAAA,OAAO,GAAG,MAAM,UAAU,CAAC;AAI3B,gFAAgF;AAChF,6EAA6E;AAC7E,mBAAmB;AACnB,sDAAsD;AAEtD,mFAAmF;AACnF,yFAAyF;AACzF,MAAM,UAAU,mBAAmB,CAAC,MAAqB;IACrD,IAAM,KAAK,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;IAC9D,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEpB,OAAO,GAAG,CAAC;AACf,CAAC","sourcesContent":["import log from 'loglevel';\r\nimport { Logger } from '..';\r\nimport { UniformConfig } from '../model';\r\n\r\n// Be sure to set a level in order for loglevel to bind to the console properly.\r\n// Otherwise, the exported logger instance will have `noop` functions for all\r\n// console methods.\r\n// Likely an issue due to how loglevel exports itself.\r\n\r\n// NOTE: be _sure_ that UNIFORM_OPTIONS_DEBUG gets exposed via WebpackDefinePlugin.\r\n// Next config has a `env` property that can be set to ensure this happens at build time.\r\nexport function createConsoleLogger(config: UniformConfig): Logger {\r\n    const level = config.UNIFORM_OPTIONS_DEBUG ? 'debug' : 'warn';\r\n    log.setLevel(level);\r\n\r\n    return log;\r\n}\r\n"]}