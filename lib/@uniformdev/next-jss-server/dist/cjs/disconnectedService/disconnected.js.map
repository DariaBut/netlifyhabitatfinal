{"version":3,"file":"disconnected.js","sourceRoot":"","sources":["../../../src/disconnectedService/disconnected.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,iDAAmD;AAEnD,6CAAuD;AAMvD,SAAgB,6BAA6B,CAAC,OAAsB,EAAE,cAAmB;IACrF,mFAAmF;IACnF,gFAAgF;IAChF,+DAA+D;IAE/D,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QAC/B,IAAM,OAAO,gBACN,cAAc,CACpB,CAAC;QAEF,4DAA4D;QAC5D,wGAAwG;QACxG,IAAM,OAAO,GAAG;YACZ,UAAU,EAAE,UAAC,UAAkB;gBAC3B,MAAM,CAAC,UAAU,CAAC,CAAC;YACvB,CAAC;YACD,8GAA8G;YAC9G,MAAM;gBACF,OAAO,IAAI,CAAC;YAChB,CAAC;YACD,IAAI,EAAE,UAAC,MAAc;gBACjB,OAAO,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC;SACJ,CAAC;QAEF,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACP,CAAC;AA3BD,sEA2BC;AAED,SAAgB,0BAA0B,CACtC,aAAkB,EAClB,KAAa,EACb,QAAgB,EAChB,OAAiB;IAAjB,wBAAA,EAAA,YAAiB;IAEjB,IAAM,cAAc,GAAG,sBAAW,CAAC,KAAK,CAAC,CAAC;IAE1C,6DAA6D;IAC7D,IAAM,cAAc,cAChB,KAAK,aACD,OAAO,EAAE,QAAQ,EACjB,IAAI,EAAE,cAAc,IACjB,OAAO,CAAC,iBAAiB,KAE7B,OAAO,CACb,CAAC;IAEF,OAAO,6BAA6B,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC,KAAK,CAAC,UAAC,KAAK;QAC5E,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;YACxE,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;SAC9B;QAED,OAAO,CAAC,KAAK,CAAC,uCAAqC,KAAO,EAAE,0BAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;QAEtF,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC,CAAC;AACP,CAAC;AA3BD,gEA2BC;AAED,SAAgB,uBAAuB,CAAC,iBAAsB,EAAE,QAAgB,EAAE,OAAiB;IAAjB,wBAAA,EAAA,YAAiB;IAC/F,6DAA6D;IAC7D,IAAM,cAAc,cAChB,MAAM,EAAE;YACJ,QAAQ,UAAA;SACX,IACE,OAAO,CACb,CAAC;IAEF,OAAO,6BAA6B,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC,IAAI,CAAC,UAAC,QAAa;QACvF,OAAO,QAAQ,CAAC,OAAO,CAAC;IAC5B,CAAC,CAAC,CAAC;AACP,CAAC;AAZD,0DAYC","sourcesContent":["import { formatRoute } from '@uniformdev/next-jss';\r\n\r\nimport { errorToJsonObject } from '@uniformdev/common';\r\n\r\nexport interface InvokeService {\r\n    middleware(req: any, res: any): void;\r\n}\r\n\r\nexport function invokeMockDisconnectedService(service: InvokeService, requestOptions: any): Promise<string> {\r\n    // Disconnected Layout Service and disconnected Dictionary Service are both exposed\r\n    // as server middleware. So we can mock the request and response objects that we\r\n    // send to the middleware and make simulated requests for data.\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const mockReq = {\r\n            ...requestOptions,\r\n        };\r\n\r\n        // Mock the `response` object used by disconnected services.\r\n        // NOTE: may need to add more response methods if the disconnected services implementations ever change.\r\n        const mockRes = {\r\n            sendStatus: (statusCode: number) => {\r\n                reject(statusCode);\r\n            },\r\n            // note: do not use an arrow function for the `status` function, otherwise `this` will not be bound correctly.\r\n            status() {\r\n                return this;\r\n            },\r\n            json: (result: string) => {\r\n                resolve(result);\r\n            },\r\n        };\r\n\r\n        service.middleware(mockReq, mockRes);\r\n    });\r\n}\r\n\r\nexport function fetchMockLayoutServiceData(\r\n    layoutService: any,\r\n    route: string,\r\n    language: string,\r\n    options: any = {}\r\n) {\r\n    const formattedRoute = formatRoute(route);\r\n\r\n    // allow devs to override default options with custom options\r\n    const requestOptions = {\r\n        query: {\r\n            sc_lang: language,\r\n            item: formattedRoute,\r\n            ...options.queryStringParams,\r\n        },\r\n        ...options,\r\n    };\r\n\r\n    return invokeMockDisconnectedService(layoutService, requestOptions).catch((error) => {\r\n        if (error.response && error.response.status === 404 && error.response.data) {\r\n            return error.response.data;\r\n        }\r\n\r\n        console.error(`Route data fetch error for route: ${route}`, errorToJsonObject(error));\r\n\r\n        return null;\r\n    });\r\n}\r\n\r\nexport function fetchMockDictionaryData(dictionaryService: any, language: string, options: any = {}) {\r\n    // allow devs to override default options with custom options\r\n    const requestOptions = {\r\n        params: {\r\n            language,\r\n        },\r\n        ...options,\r\n    };\r\n\r\n    return invokeMockDisconnectedService(dictionaryService, requestOptions).then((response: any) => {\r\n        return response.phrases;\r\n    });\r\n}\r\n"]}