{"version":3,"file":"getPropsFromDisconnectedMockStep.js","sourceRoot":"","sources":["../../../src/pagePropsPipeline/getPropsFromDisconnectedMockStep.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,yCAAmD;AACnD,8DAA8E;AAC9E,oEAA0G;AAE7F,QAAA,gCAAgC,GAA0B;IACnE,IAAI,EAAE,0BAA0B;IAChC,GAAG,EAAE,UAAO,OAAO;;;;;yBAIX,CAAA,OAAO,MAAM,KAAK,WAAW,IAAI,sBAAe,EAAE,CAAA,EAAlD,wBAAkD;yBAC9C,CAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,cAAc,CAAA,EAAvC,wBAAuC;oBACvC,qBAAM,4CAAsB,CAAC,OAAO,CAAC,EAAA;;oBAArC,SAAqC,CAAC;oBAEL,qBAAM,OAAO,CAAC,GAAG,CAAC;4BAC/C,yCAA0B,CACtB,kCAAY,CAAC,aAAa,EAC1B,OAAO,CAAC,WAAW,CAAC,aAAa,EACjC,OAAO,CAAC,WAAW,CAAC,IAAI,CAC3B;4BACD,sCAAuB,CAAC,kCAAY,CAAC,iBAAiB,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;yBACpF,CAAC,EAAA;;oBAPI,KAAA,sBAA2B,SAO/B,KAAA,EAPK,UAAU,QAAA,EAAE,UAAU,QAAA;oBAQrB,KAAK,GAAK,OAAO,MAAZ,CAAa;oBAC1B,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC9B,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC;oBAE9B,IAAI,CAAC,KAAK,CAAC,UAAU,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,EAAE;wBACrF,sCAAsC;wBACtC,2DAA2D;wBAC3D,KAAK,CAAC,UAAU,GAAG,GAAG,CAAC;qBAC1B;oBAED,4CACO,OAAO,KACV,KAAK,OAAA,KACP;wBAGV,sBAAO,OAAO,EAAC;;;SAClB;CACJ,CAAC","sourcesContent":["import { PagePropsPipelineStep } from '@uniformdev/next-jss';\r\nimport { isExportProcess } from '@uniformdev/next';\r\nimport { initializeDataServices, dataServices } from '../disconnectedService';\r\nimport { fetchMockDictionaryData, fetchMockLayoutServiceData } from '../disconnectedService/disconnected';\r\n\r\nexport const getPropsFromDisconnectedMockStep: PagePropsPipelineStep = {\r\n    name: 'disconnected-export-mock',\r\n    run: async (context) => {\r\n        // The export process may run in multiple threads/workers, and each worker will have\r\n        // a distinct `process` which does not have the same env vars as the original process.\r\n        // Therefore, we need to use next config to retrieve env vars that have been defined in next.config.js.\r\n        if (typeof window === 'undefined' && isExportProcess()) {\r\n            if (process.env.JSS_MODE === 'disconnected') {\r\n                await initializeDataServices(context);\r\n                // Fetch layout data and dictionary data from disconnected services, then write the data to disk.\r\n                const [layoutData, dictionary] = await Promise.all([\r\n                    fetchMockLayoutServiceData(\r\n                        dataServices.layoutService,\r\n                        context.routeParams.sitecoreRoute,\r\n                        context.routeParams.lang\r\n                    ),\r\n                    fetchMockDictionaryData(dataServices.dictionaryService, context.routeParams.lang),\r\n                ]);\r\n                const { props } = context;\r\n                props.layoutData = layoutData;\r\n                props.dictionary = dictionary;\r\n\r\n                if (!props.layoutData || !props.layoutData.sitecore || !props.layoutData.sitecore.route) {\r\n                    // If no route data was fetched, then:\r\n                    // Pass a statusCode as prop for any interested components.\r\n                    props.statusCode = 404;\r\n                }\r\n\r\n                return {\r\n                    ...context,\r\n                    props,\r\n                };\r\n            }\r\n        }\r\n        return context;\r\n    },\r\n};\r\n"]}