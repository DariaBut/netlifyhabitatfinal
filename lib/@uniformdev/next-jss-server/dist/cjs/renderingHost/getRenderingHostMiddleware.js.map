{"version":3,"file":"getRenderingHostMiddleware.js","sourceRoot":"","sources":["../../../src/renderingHost/getRenderingHostMiddleware.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2BAA4B;AAC5B,+CAA8C;AAC9C,mDAAoE;AACpE,oEAA6E;AAW7E,SAAgB,6BAA6B,CACzC,GAAQ,EACR,EAAyD;QAAvD,aAAa,oBAAwC,EAAE,oBAA1C;IAEf,OAAO,SAAe,UAAU,CAAC,GAAQ,EAAE,GAAQ;;;;;;wBAC/C,GAAG,CAAC,UAAU,CAAC,KAAK,EAAE;4BAClB,OAAO,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;wBACvC,CAAC,CAAC,CAAC;;;;wBAGO,OAAO,GAAG,iDAAgC,CAAC,GAAG,CAAC,CAAC;wBAEtD,yFAAyF;wBACzF,yCAAyC;wBACzC,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC;wBACnB,8EAA8E;wBAC9E,GAAG,CAAC,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC;wBAE7B,OAAO,CAAC,GAAG,CAAC,iCAAiC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;wBAExD,iGAAiG;wBACjG,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAAC;wBACrC,0EAA0E;wBAC1E,GAAG,CAAC,+BAAmB,CAAC,GAAG,OAAO,CAAC;wBAG7B,SAAS,GAAG,WAAK,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBAC9C,SAAS,GAAc;4BACvB,QAAQ,EAAE,SAAS,CAAC,QAAQ,IAAI,GAAG;4BACnC,MAAM,EAAE,SAAS,CAAC,KAAK;yBAC1B,CAAC;wBAEF,gGAAgG;wBAChG,+EAA+E;wBAC/E,oGAAoG;wBACpG,2GAA2G;wBAC3G,mHAAmH;wBACnH,yDAAyD;wBACzD,IAAI,aAAa,IAAI,OAAO,aAAa,KAAK,UAAU,EAAE;4BACtD,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;yBACxC;wBAGY,qBAAM,2BAAY,CAAC,GAAG,EAAE,GAAG,EAAE,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,MAAM,CAAC,EAAA;;wBAAzE,IAAI,GAAG,SAAkE;wBAE/E,2CAA2C;wBAC3C,GAAG,CAAC,IAAI,CAAC;4BACL,IAAI,MAAA;4BACJ,MAAM,EAAE,GAAG;4BACX,QAAQ,EAAE,EAAE;yBACf,CAAC,CAAC;;;;wBAEH,OAAO,CAAC,KAAK,CAAC,KAAG,CAAC,CAAC;wBACnB,GAAG,CAAC,IAAI,CAAC;4BACL,IAAI,EAAE,0CAAwC,KAAG,mBAAgB;4BACjE,MAAM,EAAE,GAAG;4BACX,QAAQ,EAAE,EAAE;yBACf,CAAC,CAAC;;;;;;KAEV,CAAC;AACN,CAAC;AA5DD,sEA4DC","sourcesContent":["import { parse } from 'url';\r\nimport { renderToHTML } from './renderToHTML';\r\nimport { resolveJssDataFromWebhookRequest } from './resolveJSSData';\r\nimport { SYMBOL_PREVIEW_DATA } from 'next/dist/next-server/server/api-utils';\r\n\r\nexport interface RouteInfo {\r\n    pathname: string;\r\n    params: any;\r\n}\r\n\r\nexport interface JssRenderingHostMiddlewareOptions {\r\n    routeResolver?: (routeInfo: RouteInfo) => RouteInfo;\r\n}\r\n\r\nexport function getJssRenderingHostMiddleware(\r\n    app: any,\r\n    { routeResolver }: JssRenderingHostMiddlewareOptions = {}\r\n) {\r\n    return async function middleware(req: any, res: any) {\r\n        req.setTimeout(36000, () => {\r\n            console.error('request timed out');\r\n        });\r\n\r\n        try {\r\n            const jssData = resolveJssDataFromWebhookRequest(req);\r\n\r\n            // Server rendering functions expect `GET` requests, but we're handling a `POST` request.\r\n            // so change the incoming request method.\r\n            req.method = 'GET';\r\n            // next.js renderToHtml reads from the req.url property, so set it accordingly\r\n            req.url = jssData.renderPath;\r\n\r\n            console.log('Rendering host handling request', req.url);\r\n\r\n            // Allows the app to easily determine whether or not it is being rendered via JSS rendering host.\r\n            req.isJssRenderingHostRequest = true;\r\n            // Attach the parsed JSS data as an arbitrary property on the `req` object\r\n            req[SYMBOL_PREVIEW_DATA] = jssData;\r\n\r\n            // `jssData.renderPath` contains the URL requested via Sitecore\r\n            const parsedUrl = parse(jssData.renderPath, true);\r\n            let routeInfo: RouteInfo = {\r\n                pathname: parsedUrl.pathname || '/',\r\n                params: parsedUrl.query,\r\n            };\r\n\r\n            // If we have a custom route resolver, then call it with the incoming path and query/param data.\r\n            // The custom route resolver can then handle mapping route path to actual path.\r\n            // This is mostly useful for \"dynamic\" routes, where a single page (e.g. pages/index.js) is intended\r\n            // to serve routes that aren't statically known by the app. For instance, Sitecore routes that are dynamic.\r\n            // NOTE: `routeResolver` will likely change the value of `routeInfo.pathname` and _should_ merge `routeInfo.params`\r\n            // with any params identified by the route matcher/regex.\r\n            if (routeResolver && typeof routeResolver === 'function') {\r\n                routeInfo = routeResolver(routeInfo);\r\n            }\r\n\r\n            // render app and return\r\n            const html = await renderToHTML(app, req, routeInfo.pathname, routeInfo.params);\r\n\r\n            // TODO: need to handle 404 and/or redirect\r\n            res.send({\r\n                html,\r\n                status: 200,\r\n                redirect: '',\r\n            });\r\n        } catch (err) {\r\n            console.error(err);\r\n            res.send({\r\n                html: `<html><body>JSS app rendering error: ${err}</body></html>`,\r\n                status: 500,\r\n                redirect: '',\r\n            });\r\n        }\r\n    };\r\n}\r\n"]}