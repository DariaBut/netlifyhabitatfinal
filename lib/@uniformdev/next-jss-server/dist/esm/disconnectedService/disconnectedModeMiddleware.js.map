{"version":3,"file":"disconnectedModeMiddleware.js","sourceRoot":"","sources":["../../../src/disconnectedService/disconnectedModeMiddleware.ts"],"names":[],"mappings":"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","sourcesContent":["import express from 'express';\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport {\r\n    createDisconnectedDictionaryService,\r\n    createDisconnectedLayoutService,\r\n    CustomizeContextFunction,\r\n    CustomizeRenderFunction,\r\n    ManifestManager,\r\n} from '@sitecore-jss/sitecore-jss-dev-tools';\r\nimport { tryParseJsonOrYaml, UniformJssConfig } from '@uniformdev/next-jss';\r\nimport { DisconnectedServerOptions } from '@sitecore-jss/sitecore-jss-dev-tools/types/disconnected-server/create-default-disconnected-server';\r\nimport { serverLogger } from '@uniformdev/common-server';\r\n\r\nexport interface PackageJsonConfig {\r\n    appName: string;\r\n    language: string;\r\n}\r\n\r\nfunction isLegacyPackageJsonConfig(\r\n    config: PackageJsonConfig | UniformJssConfig\r\n): config is PackageJsonConfig {\r\n    return 'appName' in config;\r\n}\r\n\r\nconst touchToReloadFilePath = path.resolve(path.join(process.cwd(), './temp/config.js'));\r\nconst dataPath = path.join(process.cwd(), './data');\r\n\r\nexport const getDisconnectedServerOptions = (\r\n    server: any,\r\n    config: UniformJssConfig | PackageJsonConfig\r\n): DisconnectedServerOptions => ({\r\n    server,\r\n    appRoot: path.join(__dirname, '..'),\r\n    appName: isLegacyPackageJsonConfig(config) ? config.appName : config.jssAppName,\r\n    watchPaths: [dataPath],\r\n    language: isLegacyPackageJsonConfig(config) ? config.language : config.defaultLanguage,\r\n    onManifestUpdated: () => {\r\n        // if we can resolve the config file, we can alter it to force reloading the app automatically\r\n        // instead of waiting for a manual reload. We must materially alter the _contents_ of the file to trigger\r\n        // an actual reload, so we append \"// reloadnow\" to the file each time. This will not cause a problem,\r\n        // since every build regenerates the config file from scratch and it's ignored from source control.\r\n        if (fs.existsSync(touchToReloadFilePath)) {\r\n            const currentFileContents = fs.readFileSync(touchToReloadFilePath, 'utf8');\r\n            const newFileContents = `${currentFileContents}\\n// reloadnow`;\r\n            fs.writeFileSync(touchToReloadFilePath, newFileContents, 'utf8');\r\n\r\n            console.log('Manifest data updated. Reloading the browser.');\r\n        } else {\r\n            console.log('Manifest data updated. Refresh the browser to see latest content!');\r\n        }\r\n    },\r\n    customizeContext,\r\n    customizeRendering,\r\n});\r\n\r\nexport function attachDisconnectedServices(\r\n    server: any,\r\n    config: UniformJssConfig | PackageJsonConfig\r\n): Promise<void> {\r\n    return createDefaultDisconnectedServer(getDisconnectedServerOptions(server, config));\r\n}\r\n\r\nfunction createDefaultDisconnectedServer(options: DisconnectedServerOptions) {\r\n    serverLogger.debug('Creating Default Disconnected Server');\r\n    const server = options.server;\r\n\r\n    // backwards compatibility with fix for #80\r\n    // for GA the appRoot was expected to be $app/scripts\r\n    // which didn't make sense. This allows both sane app roots\r\n    // and GA-style app roots to keep working.\r\n    if (options.appRoot.endsWith('scripts')) {\r\n        options.appRoot = path.join(options.appRoot, '..');\r\n    }\r\n\r\n    // further backwards compatibility for #80\r\n    // allows apps with GA watch path of '../data' (relative to /scripts)\r\n    // to keep working even with appRoot now relative to the actual app root\r\n    // We do this by stripping '../' from path leads, making the path './data' instead - theoretically, the chance of\r\n    // wanting to actually escape from the app root entirely otherwise is awfully low.\r\n    options.watchPaths = options.watchPaths.map((path) =>\r\n        path.startsWith('../') ? path.substring(1) : path\r\n    );\r\n\r\n    // the manifest manager maintains the state of the disconnected manifest data during the course of the dev run\r\n    // it provides file watching services, and language switching capabilities\r\n    const manifestManager = new ManifestManager({\r\n        appName: options.appName,\r\n        rootPath: options.appRoot,\r\n        watchOnlySourceFiles: options.watchPaths,\r\n        requireArg: options.requireArg,\r\n        sourceFiles: options.sourceFiles,\r\n    });\r\n\r\n    return manifestManager\r\n        .getManifest(options.language)\r\n        .then((manifest) => {\r\n            // creates a fake version of the Sitecore Layout Service that is powered by your disconnected manifest file\r\n            const layoutService = createDisconnectedLayoutService({\r\n                manifest,\r\n                manifestLanguageChangeCallback: manifestManager.getManifest,\r\n                customizeContext: options.customizeContext,\r\n                customizeRoute: options.customizeRoute,\r\n                customizeRendering: options.customizeRendering,\r\n            });\r\n\r\n            // creates a fake version of the Sitecore Dictionary Service that is powered by your disconnected manifest file\r\n            const dictionaryService = createDisconnectedDictionaryService({\r\n                manifest,\r\n                manifestLanguageChangeCallback: manifestManager.getManifest,\r\n            });\r\n\r\n            // set up live reloading of the manifest when any manifest source file is changed\r\n            manifestManager.setManifestUpdatedCallback((newManifest) => {\r\n                layoutService.updateManifest(newManifest);\r\n                dictionaryService.updateManifest(newManifest);\r\n                if (options.onManifestUpdated) {\r\n                    options.onManifestUpdated(newManifest);\r\n                }\r\n            });\r\n\r\n            // attach our disconnected service mocking middleware to webpack dev server\r\n            server.use('/assets', express.static(path.join(options.appRoot, 'assets')));\r\n            server.use('/data/media', express.static(path.join(options.appRoot, 'data/media')));\r\n            server.use('/sitecore/api/layout/render', layoutService.middleware);\r\n            server.use('/sitecore/api/jss/dictionary/:appName/:language', dictionaryService.middleware);\r\n\r\n            if (options.afterMiddlewareRegistered) {\r\n                options.afterMiddlewareRegistered(server);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            if (options.onError) {\r\n                options.onError(error);\r\n            } else {\r\n                console.error(error);\r\n                process.exit(1);\r\n            }\r\n        });\r\n}\r\n\r\nexport const customizeContext: CustomizeContextFunction = (\r\n    context,\r\n    _routeData,\r\n    _currentManifest,\r\n    request\r\n) => {\r\n    const routePath = request.query.item;\r\n    const language = request.query.sc_lang;\r\n    const filenames = [`${language}.json`, `${language}.yml`];\r\n    const filepaths = filenames.map((filename) => path.join(dataPath, 'context', routePath, filename));\r\n\r\n    // Attempt to find a matching `{language}.json` or `{language}.yml` file in `/data/context/{routePath}`\r\n    // If no file is found, return default context;\r\n    const contextFilePath = filepaths.find((filepath) => fs.existsSync(filepath));\r\n    if (!contextFilePath) {\r\n        return context;\r\n    }\r\n\r\n    const contextFileContents = fs.readFileSync(contextFilePath, 'utf8');\r\n    const parsedFileContents = tryParseJsonOrYaml(contextFileContents);\r\n    // If we can't parse the file contents, bail.\r\n    if (!parsedFileContents) {\r\n        return context;\r\n    }\r\n\r\n    // Merge custom context data with default context data.\r\n    return {\r\n        ...context,\r\n        ...parsedFileContents,\r\n    };\r\n};\r\n\r\nexport const customizeRendering: CustomizeRenderFunction = (transformedRendering, rendering) => {\r\n    // If a rendering has a `dataSource` value (which should be a guid), then use that value for the\r\n    // transformed rendering `dataSource` value instead of the default `available-in-connected-mode` value.\r\n    // This is primarily to accommodate personalization testing in disconnected mode with _actual_\r\n    // Layout Service data that was captured from Sitecore but is being used in disconnected mode.\r\n    if (rendering.dataSource.dataSource) {\r\n        transformedRendering.dataSource = rendering.dataSource.dataSource;\r\n    }\r\n    return transformedRendering;\r\n};\r\n"]}