{"version":3,"file":"disconnectedDataServices.js","sourceRoot":"","sources":["../../../src/disconnectedService/disconnectedDataServices.ts"],"names":[],"mappings":"AAAA,2CAA2C;AAC3C,OAAO,EACH,mCAAmC,EACnC,+BAA+B,EAC/B,eAAe,GAClB,MAAM,sCAAsC,CAAC;AAC9C,OAAO,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,MAAM,8BAA8B,CAAC;AAEpF,MAAM,CAAC,IAAM,YAAY,GAAQ;IAC7B,WAAW,EAAE,KAAK;CACrB,CAAC;AAEF,2EAA2E;AAC3E,iCAAiC;AACjC,gCAAgC;AAChC,2DAA2D;AAC3D,+FAA+F;AAC/F,iGAAiG;AACjG,kHAAkH;AAClH,kEAAkE;AAClE,kEAAkE;AAClE,oHAAoH;AACpH,uCAAuC;AACvC,kDAAkD;AAClD,sDAAsD;AACtD,6DAA6D;AAC7D,mDAAmD;AACnD,yBAAyB;AACzB,yGAAyG;AACzG,yCAAyC;AACzC,2CAA2C;AAC3C,kDAAkD;AAClD,kDAAkD;AAClD,yBAAyB;AACzB,EAAE;AACF,iHAAiH;AACjH,iEAAiE;AACjE,sFAAsF;AACtF,kDAAkD;AAClD,wBAAwB;AACxB,EAAE;AACF,oCAAoC;AACpC,sBAAsB;AACtB,kBAAkB;AAClB,YAAY;AACZ,0BAA0B;AAC1B,SAAS;AACT,KAAK;AAEL,MAAM,UAAU,sBAAsB,CAAC,EAAY;QAAV,GAAG,SAAA;IACxC,2DAA2D;IAC3D,IAAI,YAAY,CAAC,WAAW,EAAE;QAC1B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC5B;IAED,IAAM,SAAS,GAAG,GAAG,CAAC,SAAS,EAAE,CAAC;IAElC,yEAAyE;IACzE,IAAM,eAAe,GAAG,IAAI,eAAe,CAAC;QACxC,OAAO,EAAE,SAAS,CAAC,UAAU;QAC7B,QAAQ,EAAE,OAAO,CAAC,GAAG,EAAE;KAC1B,CAAC,CAAC;IAEH,oEAAoE;IACpE,eAAe,CAAC,eAAe,GAAG,KAAK,CAAC;IAExC,OAAO,eAAe,CAAC,WAAW,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,UAAC,QAAQ;QACxE,YAAY,CAAC,aAAa,GAAG,+BAA+B,CAAC;YACzD,QAAQ,UAAA;YACR,8BAA8B,EAAE,eAAe,CAAC,WAAW;YAC3D,gBAAgB,kBAAA;YAChB,kBAAkB,oBAAA;SACrB,CAAC,CAAC;QAEH,YAAY,CAAC,iBAAiB,GAAG,mCAAmC,CAAC;YACjE,QAAQ,UAAA;YACR,8BAA8B,EAAE,eAAe,CAAC,WAAW;SAC9D,CAAC,CAAC;QAEH,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC;IACpC,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["// import getNextConfig from 'next/config';\r\nimport {\r\n    createDisconnectedDictionaryService,\r\n    createDisconnectedLayoutService,\r\n    ManifestManager,\r\n} from '@sitecore-jss/sitecore-jss-dev-tools';\r\nimport { customizeContext, customizeRendering } from './disconnectedModeMiddleware';\r\n\r\nexport const dataServices: any = {\r\n    initialized: false,\r\n};\r\n\r\n// export const getPropsFromDisconnectedMockStep: PagePropsPipelineStep = {\r\n//     name: 'disconnected-mock',\r\n//     run: async (context) => {\r\n//         const { serverRuntimeConfig } = getNextConfig();\r\n//         // The export process may run in multiple threads/workers, and each worker will have\r\n//         // a distinct `process` which does not have the same env vars as the original process.\r\n//         // Therefore, we need to use next config to retrieve env vars that have been defined in next.config.js.\r\n//         if (serverRuntimeConfig?.JSS_MODE === 'disconnected') {\r\n//             return initializeDataServices(context).then(() => {\r\n//                 // Fetch layout data and dictionary data from disconnected services, then write the data to disk.\r\n//                 return Promise.all([\r\n//                     fetchMockLayoutServiceData(\r\n//                         dataServices.layoutService,\r\n//                         context.routeParams.sitecoreRoute,\r\n//                         context.routeParams.lang\r\n//                     ),\r\n//                     fetchMockDictionaryData(dataServices.dictionaryService, context.routeParams.lang),\r\n//                 ]).then((results) => {\r\n//                     const props: any = {\r\n//                         layoutData: results[0],\r\n//                         dictionary: results[1],\r\n//                     };\r\n//\r\n//                     if (!props.layoutData || !props.layoutData.sitecore || !props.layoutData.sitecore.route) {\r\n//                         // If no route data was fetched, then:\r\n//                         // Pass a statusCode as prop for any interested components.\r\n//                         props.statusCode = 404;\r\n//                     }\r\n//\r\n//                     return props;\r\n//                 });\r\n//             });\r\n//         }\r\n//         return context;\r\n//     },\r\n// };\r\n\r\nexport function initializeDataServices({ env }: any) {\r\n    // If services have already been initialized, return early.\r\n    if (dataServices.initialized) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const jssConfig = env.getConfig();\r\n\r\n    // Create a ManifestManager instance with minimum configuration required.\r\n    const manifestManager = new ManifestManager({\r\n        appName: jssConfig.jssAppName,\r\n        rootPath: process.cwd(),\r\n    });\r\n\r\n    // Set `initialManifest` to false to avoid writing manifest to disk.\r\n    manifestManager.initialManifest = false;\r\n\r\n    return manifestManager.getManifest(jssConfig.defaultLanguage).then((manifest) => {\r\n        dataServices.layoutService = createDisconnectedLayoutService({\r\n            manifest,\r\n            manifestLanguageChangeCallback: manifestManager.getManifest,\r\n            customizeContext,\r\n            customizeRendering,\r\n        });\r\n\r\n        dataServices.dictionaryService = createDisconnectedDictionaryService({\r\n            manifest,\r\n            manifestLanguageChangeCallback: manifestManager.getManifest,\r\n        });\r\n\r\n        dataServices.initialized = true;\r\n    });\r\n}\r\n"]}