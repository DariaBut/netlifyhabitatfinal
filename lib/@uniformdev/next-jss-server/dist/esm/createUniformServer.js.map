{"version":3,"file":"createUniformServer.js","sourceRoot":"","sources":["../../src/createUniformServer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,aAAa;AACb,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,OAAO,MAAM,SAAS,CAAC;AAC9B,OAAO,EAAE,gCAAgC,EAAE,MAAM,kDAAkD,CAAC;AACpG,OAAO,EAAE,0BAA0B,EAAE,MAAM,uBAAuB,CAAC;AACnE,OAAO,EACH,6BAA6B,EAE7B,wBAAwB,EACxB,YAAY,GACf,MAAM,2BAA2B,CAAC;AACnC,OAAO,EAAE,wBAAwB,EAAE,MAAM,yBAAyB,CAAC;AACnE,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAYvD,MAAM,UAAgB,mBAAmB,CAAC,EAMpB;QALlB,WAA2C,EAA3C,GAAG,mBAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,KAAA,EAC3C,eAA0D,EAA1D,OAAO,mBAAI,OAAO,CAAC,GAAG,CAAC,QAAoB,IAAI,WAAW,KAAA,EAC1D,YAAW,EAAX,IAAI,mBAAG,IAAI,KAAA,EACX,SAAS,eAAA,EACT,qBAAqB,2BAAA;;;;;;oBAErB,0DAA0D;oBAC1D,yDAAyD;oBACzD,uDAAuD;oBACvD,4BAA4B;oBAC5B,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,SAAS,CAAC;oBAE3C,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,KAAA,EAAE,CAAC,CAAC;oBACpB,qBAAqB,GAAG,GAAG,CAAC,iBAAiB,EAAE,CAAC;oBAEtD,qBAAM,GAAG,CAAC,OAAO,EAAE,EAAA;;oBAAnB,SAAmB,CAAC;oBACd,MAAM,GAAG,OAAO,EAAE,CAAC;oBACzB,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;oBACnB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;oBAErC,gCAAgC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;yBAE1C,CAAA,OAAO,KAAK,cAAc,CAAA,EAA1B,wBAA0B;oBAC1B,qBAAM,0BAA0B,CAAC,MAAM,EAAE,mBAAmB,EAAE,CAAC,EAAA;;oBAA/D,SAA+D,CAAC;;;oBAI9D,mBAAmB,GAAG,wBAAwB,CAAC,OAAO,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;oBAC1E,oBAAoB,GAAG,IAAI,wBAAwB,EAAE,CAAC;oBAEtD,OAAO,GAAG;wBACZ,mBAAmB,qBAAA;wBACnB,qBAAqB,uBAAA;qBACxB,CAAC;oBAEF,6BAA6B,CAAC,MAAM,EAAE,oBAAoB,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;oBAEnF,2DAA2D;oBAC3D,gEAAgE;oBAChE,MAAM,CAAC,GAAG,CAAC,UAAC,GAAQ,EAAE,GAAG,IAAK,OAAA,qBAAqB,CAAC,GAAG,EAAE,GAAG,CAAC,EAA/B,CAA+B,CAAC,CAAC;oBAE/D,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,UAAC,GAAU;wBAC3B,IAAI,GAAG;4BAAE,MAAM,GAAG,CAAC;wBACnB,OAAO,CAAC,GAAG,CAAC,gBAAc,SAAW,CAAC,CAAC;oBAC3C,CAAC,CAAC,CAAC;;;;;CACN","sourcesContent":["import next from 'next';\r\n// @ts-ignore\r\nimport cors from 'cors';\r\nimport express from 'express';\r\nimport { attachJssRenderingHostMiddleware } from './renderingHost/attachJssRenderingHostMiddleware';\r\nimport { attachDisconnectedServices } from './disconnectedService';\r\nimport {\r\n    attachUniformServicesToServer,\r\n    CreatePublishProviderFunc,\r\n    parseUniformServerConfig,\r\n    serverLogger,\r\n} from '@uniformdev/common-server';\r\nimport { NextBuildAndExportEngine } from '@uniformdev/next-server';\r\nimport { getNextServerConfig } from '@uniformdev/next';\r\n\r\ntype JSSMode = 'connected' | 'disconnected';\r\n\r\ninterface CreateServerOptions {\r\n    dev?: boolean;\r\n    jssMode?: JSSMode;\r\n    port?: number;\r\n    serverUrl: string;\r\n    createPublishProvider: CreatePublishProviderFunc;\r\n}\r\n\r\nexport async function createUniformServer({\r\n    dev = process.env.NODE_ENV !== 'production',\r\n    jssMode = (process.env.JSS_MODE as JSSMode) || 'connected',\r\n    port = 3000,\r\n    serverUrl,\r\n    createPublishProvider,\r\n}: CreateServerOptions) {\r\n    // Serve the local assets (css,js) from the serverUrl only\r\n    // when in ssr mode, we don't want this for static export\r\n    // this is needed for experience editor to request them\r\n    // from the correct location\r\n    process.env.UNIFORM_SSR_ASSET_PREFIX = serverUrl;\r\n\r\n    const app = next({ dev });\r\n    const defaultRequestHandler = app.getRequestHandler();\r\n\r\n    await app.prepare();\r\n    const server = express();\r\n    server.use(cors());\r\n    server.use(express.static('public'));\r\n\r\n    attachJssRenderingHostMiddleware(server, app);\r\n\r\n    if (jssMode === 'disconnected') {\r\n        await attachDisconnectedServices(server, getNextServerConfig());\r\n    }\r\n\r\n    // Setup Uniform config and attach Uniform-specific middleware to the existing server.\r\n    const uniformServerConfig = parseUniformServerConfig(process.env, serverLogger);\r\n    const buildAndExportEngine = new NextBuildAndExportEngine();\r\n\r\n    const options = {\r\n        uniformServerConfig,\r\n        createPublishProvider,\r\n    };\r\n\r\n    attachUniformServicesToServer(server, buildAndExportEngine, serverLogger, options);\r\n\r\n    // We have to wrap defaultRequestHandler because it doesn't\r\n    // have the same function signature as an express RequestHandler\r\n    server.use((req: any, res) => defaultRequestHandler(req, res));\r\n\r\n    server.listen(port, (err: Error) => {\r\n        if (err) throw err;\r\n        console.log(`> Ready on ${serverUrl}`);\r\n    });\r\n}\r\n"]}