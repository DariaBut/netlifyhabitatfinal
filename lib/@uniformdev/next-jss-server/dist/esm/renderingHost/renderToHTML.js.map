{"version":3,"file":"renderToHTML.js","sourceRoot":"","sources":["../../../src/renderingHost/renderToHTML.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAmB,cAAc,EAAE,MAAM,MAAM,CAAC;AAMvD,MAAM,UAAU,YAAY,CAAC,GAAyB,EAAE,GAAoB,EAAE,QAAgB,EAAE,MAAW;IAA3G,iBASC;IARG,OAAO,IAAI,OAAO,CAAC,UAAO,GAAG;;;;;oBAEnB,OAAO,GAAG,IAAI,cAAc,CAAC,GAAG,CAAC,CAAC;oBACxC,OAAO,CAAC,GAAG,GAAG,UAAS,IAAY;wBAC/B,GAAG,CAAC,IAAI,CAAC,CAAC;oBACd,CAAQ,CAAC;oBACT,qBAAM,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,EAAA;;oBAAhD,SAAgD,CAAC;;;;SACpD,CAAC,CAAC;AACP,CAAC","sourcesContent":["import { IncomingMessage, ServerResponse } from 'http';\r\n\r\nexport interface CompatibleNextServer {\r\n    render(req: IncomingMessage, res: ServerResponse, pathname: string, params: any): Promise<string>;\r\n}\r\n\r\nexport function renderToHTML(app: CompatibleNextServer, req: IncomingMessage, pathname: string, params: any) {\r\n    return new Promise(async (res) => {\r\n        // Mock the Server Response so that we can get the html response\r\n        const htmlRes = new ServerResponse(req);\r\n        htmlRes.end = function(html: string) {\r\n            res(html);\r\n        } as any;\r\n        await app.render(req, htmlRes, pathname, params);\r\n    });\r\n}\r\n"]}