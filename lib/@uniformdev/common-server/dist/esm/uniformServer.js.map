{"version":3,"file":"uniformServer.js","sourceRoot":"","sources":["../../src/uniformServer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Application } from 'express';\r\n\r\nimport { Logger } from '@uniformdev/common';\r\n\r\nimport { UniformServerMode, UniformServerConfig, CreatePublishProviderFunc } from '.';\r\n\r\nimport { createServer } from './createServer';\r\n\r\nimport { BuildAndExportEngine } from '.';\r\nimport { parseUniformServerConfig } from '.';\r\nimport { attachStatusMiddleware } from './middleware/statusMiddleware';\r\nimport { attachDeploymentStatusMiddleware } from './middleware/deploymentStatusMiddleware';\r\nimport { attachDeploymentTriggerMiddleware } from './middleware/deploymentTriggerMiddleware';\r\nimport { attachPreviewMiddleware } from './middleware/previewMiddleware';\r\nimport { attachMediaMiddleware } from './middleware/mediaMiddleware';\r\nimport { getTempDir } from './getTempDir';\r\nimport { BuildDeployService } from '.';\r\n\r\nexport async function createUniformServer(\r\n    buildAndExportEngine: BuildAndExportEngine,\r\n    logger: Logger,\r\n    options?: {\r\n        uniformServerConfig?: UniformServerConfig;\r\n        createPublishProvider?: CreatePublishProviderFunc;\r\n    }\r\n): Promise<Application> {\r\n    logger.info('Server is being activated...');\r\n\r\n    if (!options || !options.uniformServerConfig) {\r\n        throw new Error('options argument is either missing or lacks uniformServerConfig property');\r\n    }\r\n\r\n    const server = createServer(logger);\r\n\r\n    attachUniformServicesToServer(server, buildAndExportEngine, logger, options);\r\n\r\n    return server;\r\n}\r\n\r\nexport function attachUniformServicesToServer(\r\n    server: any,\r\n    buildAndExportEngine: BuildAndExportEngine,\r\n    logger: Logger,\r\n    options?: {\r\n        uniformServerConfig?: UniformServerConfig;\r\n        createPublishProvider?: CreatePublishProviderFunc;\r\n    }\r\n) {\r\n    const config = (options && options.uniformServerConfig) || parseUniformServerConfig(process.env, logger);\r\n\r\n    if (config.UNIFORM_MODE !== UniformServerMode.publish) {\r\n        attachPreviewMiddleware(server, config, logger);\r\n        attachMediaMiddleware(server, config, logger);\r\n    }\r\n\r\n    if (config.UNIFORM_MODE === UniformServerMode.preview) {\r\n        server.get(\r\n            [\r\n                '/uniform/api/service/status',\r\n                '/uniform/api/deployment/status',\r\n                '/uniform/api/deployment/status/:ticket',\r\n            ],\r\n            (_req: any, res: any) => {\r\n                const msg =\r\n                    'The Uniform service is configured to be preview only, but it was attempted to be used for publishing. If this was intentional, set UNIFORM_MODE=mixed or UNIFORM_MODE=publish';\r\n                logger.error(msg);\r\n                res.status(500).send(msg);\r\n                return;\r\n            }\r\n        );\r\n    } else {\r\n        // publish or mixed\r\n        const createPublishProvider = options && options.createPublishProvider;\r\n\r\n        if (!createPublishProvider) {\r\n            throw new Error('Publish provider factory is not defined. It is only allowed in preview mode.');\r\n        }\r\n\r\n        const publishProvider = createPublishProvider({\r\n            config,\r\n            logger,\r\n        });\r\n\r\n        if (!publishProvider) {\r\n            throw new Error(\"createPublishProvider hasn't passed validation.\");\r\n        }\r\n\r\n        const tempDir = getTempDir(config);\r\n\r\n        // the server is restarted so delete all tickets so if there's Uniform module waits for deploy to complete\r\n        // it is notified that the job was interrupted\r\n\r\n        // no await as it is a background task\r\n        BuildDeployService.reset(tempDir, logger);\r\n\r\n        // attach middlewares\r\n        attachStatusMiddleware(server, config, logger);\r\n        attachDeploymentStatusMiddleware(server, tempDir, config, logger);\r\n        attachDeploymentTriggerMiddleware(\r\n            server,\r\n            buildAndExportEngine,\r\n            createPublishProvider,\r\n            tempDir,\r\n            config,\r\n            logger\r\n        );\r\n    }\r\n\r\n    server.get(['/uniform/api/*'], (_req: any, res: any) => {\r\n        const msg = 'Bad request';\r\n        logger.error(msg);\r\n        res.status(400).send(msg);\r\n        return;\r\n    });\r\n}\r\n\r\nexport function startUniformServer(\r\n    server: Application,\r\n    uniformServerConfig: UniformServerConfig,\r\n    logger: Logger\r\n) {\r\n    // NOTE: when hosting on IIS (iisnode; on Windows or Azure), PORT may be named-pipe, not a number\r\n    const port: any = uniformServerConfig.PORT;\r\n\r\n    server.listen(port, (err: any) => {\r\n        if (err) {\r\n            throw err;\r\n        }\r\n\r\n        if (!uniformServerConfig.UNIFORM_OPTIONS_DEBUG) {\r\n            logger.info(\r\n                'Uniform debug logging is disabled. UNIFORM_OPTIONS_DEBUG env variable is undefined or false.'\r\n            );\r\n        }\r\n\r\n        const isPreview = uniformServerConfig.UNIFORM_OPTIONS_PREVIEW;\r\n        logger.info(\r\n            `Uniform preview is ${\r\n                isPreview ? 'enabled' : 'disabled'\r\n            }. UNIFORM_OPTIONS_PREVIEW env variable is ${isPreview ? 'undefined or true' : 'false'}.`\r\n        );\r\n\r\n        logger.info(`HTTP server is ready on port ${port}`);\r\n    });\r\n}\r\n"]}