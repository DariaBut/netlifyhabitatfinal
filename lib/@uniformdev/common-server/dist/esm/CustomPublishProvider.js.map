{"version":3,"file":"CustomPublishProvider.js","sourceRoot":"","sources":["../../src/CustomPublishProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAA0B,YAAY,EAAE,MAAM,GAAG,CAAC;AACzD,OAAO,EAAE,MAAM,EAAU,MAAM,oBAAoB,CAAC;AAGpD,OAAO,aAAa,MAAM,eAAe,CAAC;AAC1C,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAEhD;IAII,+BAAY,EAAyD;YAAvD,MAAM,YAAA,EAAE,cAAqB,EAArB,MAAM,mBAAG,YAAY,KAAA;QACvC,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAElD,IAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,gCAAgC,CAAC,CAAC;QACrE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CACX,wHAAwH,CAC3H,CAAC;SACL;QAED,MAAM,CAAC,IAAI,CAAC,mDAAmD,GAAG,OAAO,CAAC,CAAC;QAC3E,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,iCAAiC,CAAC,CAAC;QACvE,QAAQ,QAAQ,EAAE;YACd,KAAK,mBAAmB;gBACpB,IAAI,CAAC,QAAQ,GAAG,mBAAmB,CAAC;gBACpC,MAAM;YACV,KAAK,kBAAkB;gBACnB,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC;gBACnC,MAAM;YACV;gBACI,MAAM,IAAI,KAAK,CACX,SAAO,QAAQ,oEAAiE,CACnF,CAAC;SACT;IACL,CAAC;IAIK,sCAAM,GAAZ,UAAa,IAAY;;;;;;wBACrB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,0BAA0B,CAAC,CAAC;wBAE7D,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBACvD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,CAAC;wBACnB,qBAAM,IAAI,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC,EAAA;;wBAAzE,MAAM,GAAK,CAAA,SAA8D,CAAA,OAAnE;wBAER,MAAM,GAAG,uBAAuB,CAAC;wBACvC,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;4BACpC,MAAM,IAAI,KAAK,CAAC,0DAA0D,GAAG,MAAM,CAAC,CAAC;yBACxF;;;;;KACJ;IACL,4BAAC;AAAD,CAAC,AA/CD,IA+CC","sourcesContent":["import { PublishProviderOptions, serverLogger } from '.';\r\nimport { getEnv, Logger } from '@uniformdev/common';\r\nimport { PublishProvider } from '.';\r\n\r\nimport child_process from 'child_process';\r\nimport util from 'util';\r\nconst exec = util.promisify(child_process.exec);\r\n\r\nexport class CustomPublishProvider implements PublishProvider {\r\n    private command: string;\r\n    private readonly logger: Logger;\r\n\r\n    constructor({ config, logger = serverLogger }: PublishProviderOptions) {\r\n        logger.info('Initializing CustomPublishProvider');\r\n\r\n        const command = getEnv(config.env, 'UNIFORM_PUBLISH_CUSTOM_COMMAND');\r\n        if (!command.includes('__DIR__')) {\r\n            throw new Error(\r\n                'The UNIFORM_PUBLISH_CUSTOM_COMMAND setting does not contain the __DIR__ token that will be replaced with dir to upload'\r\n            );\r\n        }\r\n\r\n        logger.info('Initializing CustomPublishProvider with command: ' + command);\r\n        this.command = command;\r\n        this.logger = logger;\r\n\r\n        const behavior = getEnv(config.env, 'UNIFORM_PUBLISH_CUSTOM_BEHAVIOR');\r\n        switch (behavior) {\r\n            case 'replace-on-deploy':\r\n                this.behavior = 'replace-on-deploy';\r\n                break;\r\n            case 'update-on-deploy':\r\n                this.behavior = 'update-on-deploy';\r\n                break;\r\n            default:\r\n                throw new Error(\r\n                    `The ${behavior} is not supported. Options: update-on-deploy, replace-on-deploy`\r\n                );\r\n        }\r\n    }\r\n\r\n    behavior: 'replace-on-deploy' | 'update-on-deploy';\r\n\r\n    async deploy(path: string): Promise<void> {\r\n        this.logger.info('Deploying ' + path + ' (CustomPublishProvider)');\r\n\r\n        const command = this.command.replace(/__DIR__/g, path);\r\n        this.logger.debug('Exec: ' + command);\r\n        const { stdout } = await exec(command, { cwd: '.', maxBuffer: 20 * 1024 * 1024 });\r\n\r\n        const phrase = 'Deployed successfully';\r\n        if (stdout && !stdout.includes(phrase)) {\r\n            throw new Error('Upload failed, command did not return following phrase: ' + phrase);\r\n        }\r\n    }\r\n}\r\n"]}