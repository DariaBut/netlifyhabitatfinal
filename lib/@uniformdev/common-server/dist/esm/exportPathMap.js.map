{"version":3,"file":"exportPathMap.js","sourceRoot":"","sources":["../../src/exportPathMap.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,IAAI,CAAC;AAE1D,OAAO,EAAE,IAAI,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAI7D,OAAO,EAAE,eAAe,EAAE,MAAM,GAAG,CAAC;AACpC,OAAO,EAAE,wBAAwB,EAAE,MAAM,GAAG,CAAC;AAE7C,MAAM,UAAgB,aAAa,CAAC,MAAc;;QAc9C,SAAS,OAAO,CAAC,GAAW;YACxB,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YACrB,MAAM,CAAC,KAAK,CAAC,qBAAqB,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;YAChD,KAAK,CAAC,GAAG,CAAC,GAAG;gBACT,IAAI,EAAE,QAAQ;gBACd,KAAK,EAAE,EAAE;aACZ,CAAC;QACN,CAAC;QAED,SAAS,kBAAkB,CAAC,IAAS,EAAE,OAAe;YAClD,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YAEvC,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,MAAI,WAAW,MAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;aACnD;YAED,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC/B,IAAI,QAAQ,EAAE;gBACV,KAAK,IAAI,SAAS,IAAI,QAAQ,EAAE;oBAC5B,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;wBACrC,SAAS;qBACZ;oBAED,IAAM,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;oBAElC,kBAAkB,CAAC,KAAK,EAAK,WAAW,SAAI,SAAW,CAAC,CAAC;iBAC5D;aACJ;QACL,CAAC;;;;;oBAzCK,MAAM,GAAG,wBAAwB,CAAC,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;oBACvD,GAAG,GAAG,MAAM,CAAC,wBAAwB,CAAC;oBAC5C,IAAI,UAAU,CAAC,GAAG,GAAG,oBAAoB,CAAC,EAAE;wBACxC,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;wBACtC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG,oBAAoB,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;wBAC5E,UAAU,CAAC,GAAG,GAAG,oBAAoB,CAAC,CAAC,CAAC,8EAA8E;wBACtH,sBAAO,GAAG,EAAC;qBACd;oBAED,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;oBAE5B,KAAK,GAAQ,EAAE,CAAC;;;;oBAiCL,qBAAM,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,EAAA;;oBAA5C,IAAI,GAAG,SAAqC;oBAElD,MAAM,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;oBAEvC,IAAI,CAAC,IAAI;wBAAE,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;oBAEtC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;oBAE9B,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;oBACrC,sBAAO,KAAK,EAAC;;;oBAEb,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,iBAAiB,CAAC,IAAE,CAAC,CAAC,CAAC;oBAEjE,MAAM,IAAE,CAAC;;;;;CAEhB","sourcesContent":["import { readFileSync, existsSync, unlinkSync } from 'fs';\r\n\r\nimport { trim, errorToJsonObject } from '@uniformdev/common';\r\n\r\nimport { Logger } from '@uniformdev/common';\r\n\r\nimport { downloadSiteMap } from '.';\r\nimport { parseUniformServerConfig } from '.';\r\n\r\nexport async function exportPathMap(logger: Logger) {\r\n    const config = parseUniformServerConfig(process.env, logger);\r\n    const tmp = config.UNIFORM_PUBLISH_TEMP_DIR;\r\n    if (existsSync(tmp + '/.publish-map.json')) {\r\n        logger.info('Parsing .publish-map.json...');\r\n        const map = JSON.parse(readFileSync(tmp + '/.publish-map.json').toString());\r\n        unlinkSync(tmp + '/.publish-map.json'); // to make sure it is only used for export (it is not guarantee, but 99% case)\r\n        return map;\r\n    }\r\n\r\n    logger.info('Downloading map...');\r\n\r\n    const pages: any = {};\r\n\r\n    function addPage(url: string) {\r\n        url = encodeURI(url);\r\n        logger.debug('Add site map page \"' + url + '\"');\r\n        pages[url] = {\r\n            page: '/index',\r\n            query: {},\r\n        };\r\n    }\r\n\r\n    function addItemRecursively(item: any, itemUrl: string) {\r\n        const contentPath = trim(itemUrl, '/');\r\n\r\n        if (item.isPage) {\r\n            addPage(contentPath ? `/${contentPath}/` : '/');\r\n        }\r\n\r\n        const children = item.children;\r\n        if (children) {\r\n            for (let childName in children) {\r\n                if (!children.hasOwnProperty(childName)) {\r\n                    continue;\r\n                }\r\n\r\n                const child = children[childName];\r\n\r\n                addItemRecursively(child, `${contentPath}/${childName}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    try {\r\n        const home = await downloadSiteMap(config, logger);\r\n\r\n        logger.info('Registering path map...');\r\n\r\n        if (!home) throw new Error('No home');\r\n\r\n        addItemRecursively(home, '/');\r\n\r\n        logger.info('Path map is exported.');\r\n        return pages;\r\n    } catch (ex) {\r\n        logger.error('Failed to export path map', errorToJsonObject(ex));\r\n\r\n        throw ex;\r\n    }\r\n}\r\n"]}