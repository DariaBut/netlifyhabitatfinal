{"version":3,"file":"parseUniformServerConfig.js","sourceRoot":"","sources":["../../src/parseUniformServerConfig.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,kBAAkB,EAAU,MAAM,oBAAoB,CAAC;AAExE,OAAO,EAAuB,iBAAiB,EAAE,MAAM,GAAG,CAAC;AAE3D,MAAM,UAAU,wBAAwB,CACpC,GAAQ,EACR,MAAc,EACd,OAAwB;IAAxB,wBAAA,EAAA,eAAwB;IAExB,IAAM,WAAW,GAAG,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC;IAEvC,IAAI,OAAO,EAAE;QACT,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;KAC5C;IAED,IAAM,iBAAiB,GAAG,MAAM,CAAC,WAAW,EAAE,mBAAmB,EAAE,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7F,IAAM,wBAAwB,GAAG,MAAM,CAAC,WAAW,EAAE,0BAA0B,EAAE,OAAO,CAAC,CAAC;IAC1F,IAAM,IAAI,GAAG,MAAM,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAEjD,IAAM,MAAM,GAAG,kBAAkB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAExD,IAAM,YAAY,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAEnD,IAAM,YAAY,uBACd,iBAAiB,mBAAA;QACjB,YAAY,cAAA;QACZ,wBAAwB,0BAAA;QACxB,IAAI,MAAA,IACD,MAAM,KACT,GAAG,eAAO,WAAW,IACxB,CAAC;IAEF,kCAAkC,CAAC,YAAY,CAAC,CAAC;IAEjD,OAAO,YAAY,CAAC;AACxB,CAAC;AAED,SAAS,gBAAgB,CAAC,MAAW;IACjC,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;IACtD,QAAQ,KAAK,CAAC,WAAW,EAAE,EAAE;QACzB,KAAK,OAAO;YACR,OAAO,iBAAiB,CAAC,KAAK,CAAC;QAEnC,KAAK,SAAS;YACV,OAAO,iBAAiB,CAAC,OAAO,CAAC;QAErC,KAAK,SAAS;YACV,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;YAC9E,OAAO,iBAAiB,CAAC,OAAO,CAAC;QAErC;YACI,MAAS,KAAK,mCAAgC,CAAC;KACtD;AACL,CAAC;AAED,MAAM,UAAU,kCAAkC,CAAC,MAA2B;IAC1E,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC,MAAM,CACpE,UAAC,MAAgB,EAAE,GAAW;QAC1B,IAAM,gBAAgB,GAAG,oCAAoC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC;QAC3E,IAAI,gBAAgB,KAAK,IAAI,EAAE;YAC3B,MAAM,CAAC,IAAI,CAAC,gBAA0B,CAAC,CAAC;SAC3C;QACD,OAAO,MAAM,CAAC;IAClB,CAAC,EACD,EAAE,CACL,CAAC;IAEF,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;KAC9D;AACL,CAAC;AAID,MAAM,CAAC,IAAM,oCAAoC,GAAoD,EAAE,CAAC","sourcesContent":["import { getEnv, parseUniformConfig, Logger } from '@uniformdev/common';\r\n\r\nimport { UniformServerConfig, UniformServerMode } from '.';\r\n\r\nexport function parseUniformServerConfig(\r\n    env: any,\r\n    logger: Logger,\r\n    runtime: boolean = false\r\n): UniformServerConfig {\r\n    const resolvedEnv = env || process.env;\r\n\r\n    if (runtime) {\r\n        logger.info('Loading Uniform config...');\r\n    }\r\n\r\n    const UNIFORM_API_TOKEN = getEnv(resolvedEnv, 'UNIFORM_API_TOKEN', runtime ? undefined : '');\r\n    const UNIFORM_PUBLISH_TEMP_DIR = getEnv(resolvedEnv, 'UNIFORM_PUBLISH_TEMP_DIR', '.temp');\r\n    const PORT = getEnv(resolvedEnv, 'PORT', '3000');\r\n\r\n    const config = parseUniformConfig(resolvedEnv, runtime);\r\n\r\n    const UNIFORM_MODE = parseUniformMode(resolvedEnv);\r\n\r\n    const serverConfig: UniformServerConfig = {\r\n        UNIFORM_API_TOKEN,\r\n        UNIFORM_MODE,\r\n        UNIFORM_PUBLISH_TEMP_DIR,\r\n        PORT,\r\n        ...config,\r\n        env: { ...resolvedEnv },\r\n    };\r\n\r\n    validateUniformServerConfiguration(serverConfig);\r\n\r\n    return serverConfig;\r\n}\r\n\r\nfunction parseUniformMode(config: any): UniformServerMode {\r\n    const value = getEnv(config, 'UNIFORM_MODE', 'mixed');\r\n    switch (value.toLowerCase()) {\r\n        case 'mixed':\r\n            return UniformServerMode.mixed;\r\n\r\n        case 'preview':\r\n            return UniformServerMode.preview;\r\n\r\n        case 'publish':\r\n            throw new Error('This mode is temporary not supported. Use \"mixed\" instead.');\r\n            return UniformServerMode.publish;\r\n\r\n        default:\r\n            throw `${value} uniform mode is not supported`;\r\n    }\r\n}\r\n\r\nexport function validateUniformServerConfiguration(config: UniformServerConfig) {\r\n    const isValid = Object.keys(uniformServerConfigurationValidators).reduce(\r\n        (result: string[], key: string) => {\r\n            const validationResult = uniformServerConfigurationValidators[key](config);\r\n            if (validationResult !== true) {\r\n                result.push(validationResult as string);\r\n            }\r\n            return result;\r\n        },\r\n        []\r\n    );\r\n\r\n    if (!isValid) {\r\n        throw new Error(`Uniform server configuration is invalid`);\r\n    }\r\n}\r\n\r\nexport type UniformServerConfigValidator = (config: UniformServerConfig) => boolean | string;\r\n\r\nexport const uniformServerConfigurationValidators: { [key: string]: UniformServerConfigValidator } = {};\r\n"]}