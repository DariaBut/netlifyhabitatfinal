{"version":3,"file":"Status.js","sourceRoot":"","sources":["../../src/Status.ts"],"names":[],"mappings":"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","sourcesContent":["import { existsSync, readFileSync, writeFileSync } from 'fs';\r\nimport { countFiles } from '.';\r\nimport { getBoolEnv } from '@uniformdev/common';\r\n\r\nfunction getStatusPath(outputDir: string): string {\r\n    return outputDir + '.json';\r\n}\r\n\r\nfunction getTimerPath(outputDir: string): string {\r\n    return outputDir + '-time.json';\r\n}\r\n\r\nexport class Status {\r\n    status?: string;\r\n    message?: string;\r\n    processed?: number;\r\n    total?: number;\r\n    error?: any;\r\n    time?: any;\r\n\r\n    static writeStatus(outputDir: string, obj: Status) {\r\n        writeFileSync(getStatusPath(outputDir), JSON.stringify(obj));\r\n    }\r\n\r\n    static writeTimer(outputDir: string) {\r\n        writeFileSync(getTimerPath(outputDir), JSON.stringify(new Date().toJSON()));\r\n    }\r\n\r\n    static async readStatus(outputDir: string): Promise<Status | undefined> {\r\n        const statusPath = getStatusPath(outputDir);\r\n        const timerPath = getTimerPath(outputDir);\r\n\r\n        const obj: Status | undefined = existsSync(statusPath)\r\n            ? JSON.parse(readFileSync(statusPath).toString())\r\n            : undefined;\r\n\r\n        const time = existsSync(timerPath) ? JSON.parse(readFileSync(timerPath).toString()) : undefined;\r\n\r\n        if (!obj || !time) {\r\n            return undefined;\r\n        }\r\n\r\n        if (getBoolEnv(process.env, 'UNIFORM_EXPORT_PRECISE_PROGRESS_ENABLED', false)) {\r\n            await Status.updateProgress(obj, outputDir);\r\n        }\r\n\r\n        obj.time = time;\r\n\r\n        return obj;\r\n    }\r\n\r\n    static createTimer(outputDir: string) {\r\n        return setInterval(() => {\r\n            Status.writeTimer(outputDir);\r\n        }, 1000);\r\n    }\r\n\r\n    static async updateProgress(obj: Status, outputDir: string): Promise<void> {\r\n        if (obj.total && obj.total > 0) {\r\n            switch (obj.message) {\r\n                case 'Generating HTML site files':\r\n                    obj.processed = await countFiles(outputDir, '.html');\r\n                    break;\r\n\r\n                case 'Generating revision .txt files':\r\n                    obj.processed = await countFiles(outputDir, '.txt');\r\n                    break;\r\n            }\r\n\r\n            if (obj.processed !== undefined && obj.processed !== null) {\r\n                obj.message +=\r\n                    ', progress: ' +\r\n                    Math.round((obj.processed * 100) / obj.total) +\r\n                    '% (' +\r\n                    obj.processed +\r\n                    '/' +\r\n                    obj.total +\r\n                    ')';\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}