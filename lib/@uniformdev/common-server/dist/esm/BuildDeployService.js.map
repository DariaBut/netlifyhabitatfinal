{"version":3,"file":"BuildDeployService.js","sourceRoot":"","sources":["../../src/BuildDeployService.ts"],"names":[],"mappings":"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","sourcesContent":["import { mkdirSync, writeFileSync, existsSync } from 'fs';\r\nimport del from 'del';\r\n\r\nimport { Logger } from '@uniformdev/common';\r\nimport { UniformServerConfig } from '.';\r\n\r\nimport { errorToJsonObject } from '@uniformdev/common';\r\n\r\nimport { downloadSiteMap, buildArrayOfPaths } from '.';\r\nimport { Status } from '.';\r\nimport { PublishProvider } from '.';\r\nimport { FakePublishProvider } from '.';\r\n\r\nexport interface BuildAndExportEngine {\r\n    execute(outputDir: string, config: UniformServerConfig, logger: Logger): Promise<void>;\r\n}\r\n\r\nexport class BuildDeployService {\r\n    static async reset(tempDir: string, logger: Logger): Promise<void> {\r\n        logger.info('Deleting ticket files to reset status of all publish jobs');\r\n        await del(tempDir + '/*.json');\r\n        logger.info('Publish tickets were successfully deleted');\r\n    }\r\n\r\n    static async status(outputDir: string): Promise<Status | undefined> {\r\n        return await Status.readStatus(outputDir);\r\n    }\r\n\r\n    // NOTE: prefix `req` with `_` to avoid TS complaining about unused parameters.\r\n    static async process(\r\n        tmp: string,\r\n        buildAndExport: BuildAndExportEngine,\r\n        publishProvider: PublishProvider,\r\n        outputDir: string,\r\n        paths: string[],\r\n        timer: any,\r\n        config: UniformServerConfig,\r\n        logger: Logger,\r\n        timestamp: string\r\n    ): Promise<void> {\r\n        try {\r\n            let map: any = undefined;\r\n            if (paths && paths.length === 0) {\r\n                // empty array really means no paths to be deployed\r\n                logger.warn('Deploy request does not contain any paths, downloading map...');\r\n                map = await downloadSiteMap(config, logger);\r\n                paths = await buildArrayOfPaths(map, logger);\r\n            }\r\n\r\n            if (paths.length > 0 && publishProvider.behavior !== 'replace-on-deploy') {\r\n                const publishMap: any = {};\r\n                paths.forEach((path) => {\r\n                    const url = encodeURI(path);\r\n                    logger.debug('Add publish map page \"' + url + '\"');\r\n                    publishMap[url] = {\r\n                        page: '/index',\r\n                        query: {},\r\n                    };\r\n                });\r\n\r\n                logger.info('Saving ' + tmp + '/.publish-map.json');\r\n                writeFileSync(tmp + '/.publish-map.json', JSON.stringify(publishMap));\r\n            }\r\n            \r\n            let timestampDir = '';\r\n            let outDir = outputDir;\r\n            if (publishProvider.behavior === 'update-on-deploy') {\r\n                timestampDir = `${outputDir}/timestamp`;\r\n                outDir = `${outputDir}/out`;\r\n            }            \r\n            logger.info(`Creating output dir: ${outputDir}`);\r\n            mkdirSync(outputDir, { recursive: true });\r\n\r\n            logger.info('Starting export for ' + paths.length + ' page(s):\\n' + paths.join(\"\\n\"));\r\n\r\n            try {\r\n                if (paths.length <= 0) {\r\n                    Status.writeStatus(outputDir, {\r\n                        status: 'In progress',\r\n                        message:\r\n                            'Skip generating HTML site files (because no pages were changed since last publish)',\r\n                    });\r\n\r\n                    // the next export removes everything from the output folder so needs to be first\r\n                    logger.info(\r\n                        'Skip generating HTML site files (because no pages were changed since last publish)'\r\n                    );\r\n                } else {\r\n                    Status.writeStatus(outputDir, {\r\n                        status: 'In progress',\r\n                        message: 'Generating HTML site files',\r\n                        total: paths.length + 2,\r\n                    }); // 404.html and 404/index.html\r\n\r\n                    // the next export removes everything from the output folder so needs to be first\r\n                    logger.info('Starting build and export...');\r\n                    try {\r\n                        await buildAndExport.execute(outDir, config, logger);\r\n                    } catch (ex) {\r\n                        logger.error('Failed to build or export app, so deploy process is interrupted.');\r\n\r\n                        throw ex;\r\n                    }\r\n                }\r\n            } catch (ex) {\r\n                const obj = {\r\n                    status: 'Failed',\r\n                    message: 'Failed to build and export site',\r\n                    error: errorToJsonObject(ex),\r\n                };\r\n\r\n                logger.error(obj.message + '\\r\\n' + (obj.error as any).stderr);\r\n\r\n                Status.writeStatus(outputDir, obj);\r\n                clearInterval(timer);\r\n                return;\r\n            }\r\n\r\n            try {\r\n                if (publishProvider.behavior !== 'update-on-deploy') {\r\n                    Status.writeStatus(outputDir, { \r\n                        status: 'In progress',\r\n                        message: 'Creating .timestamp.txt file',\r\n                    });\r\n                    logger.info('Creating .timestamp.txt file');                    \r\n                    writeFileSync(outDir + '/.timestamp.txt', JSON.stringify(timestamp));\r\n                }\r\n\r\n                logger.info('Starting deployment');\r\n                if (publishProvider.behavior !== 'replace-on-deploy') {\r\n                    Status.writeStatus(outputDir, {\r\n                        status: 'In progress',\r\n                        message: 'Uploading site assets separately',\r\n                    });\r\n\r\n                    if (existsSync(outDir + '/static')) {\r\n                        await publishProvider.deploy(outDir + '/static');\r\n                        await del(outDir + '/static');\r\n                    } else if (existsSync(outDir + '/public')) {\r\n                        await publishProvider.deploy(outDir + '/public');\r\n                        await del(outDir + '/public');\r\n                    }\r\n                }\r\n\r\n                Status.writeStatus(outputDir, {\r\n                    status: 'In progress',\r\n                    message: 'Uploading HTML site files',\r\n                });\r\n                await publishProvider.deploy(outDir);             \r\n\r\n                logger.info(`Successfully deployed ${outDir} folder`);                \r\n                \r\n                if (publishProvider.behavior === 'update-on-deploy') {\r\n                    Status.writeStatus(outputDir, { \r\n                        status: 'In progress',\r\n                        message: 'Creating .timestamp.txt file',\r\n                    });\r\n                    logger.info('Creating .timestamp.txt file');\r\n                    mkdirSync(timestampDir, { recursive: true });\r\n                    writeFileSync(timestampDir + '/.timestamp.txt', JSON.stringify(timestamp));\r\n                    await publishProvider.deploy(timestampDir);                    \r\n                }\r\n\r\n                Status.writeStatus(outputDir, { status: 'Success', message: 'Deployment is complete' });\r\n\r\n                if (\r\n                    publishProvider !== undefined &&\r\n                    !(publishProvider instanceof FakePublishProvider) &&\r\n                    !config.UNIFORM_OPTIONS_DEBUG\r\n                ) {\r\n                    logger.info('Deleting temp dir: ' + outDir);\r\n                    await del([outDir]);\r\n                    logger.info('Temp dir was deleted: ' + outDir);\r\n                    \r\n                    if (publishProvider.behavior === 'update-on-deploy') {\r\n                        logger.info('Deleting temp dir: ' + timestampDir);\r\n                        await del([timestampDir]);\r\n                        logger.info('Temp dir was deleted: ' + timestampDir);\r\n                    }\r\n                } else {\r\n                    logger.debug(\r\n                        'Skipping (due to debug mode or fake publish provider used) deleting temp dir: ' +\r\n                            outputDir\r\n                    );\r\n                }\r\n            } catch (ex) {\r\n                const obj = {\r\n                    status: 'Failed',\r\n                    message: 'Failed to deploy site',\r\n                    error: errorToJsonObject(ex),\r\n                };\r\n\r\n                logger.error(obj);\r\n\r\n                Status.writeStatus(outputDir, obj);\r\n                clearInterval(timer);\r\n                return;\r\n            }\r\n        } catch (ex) {\r\n            logger.error('Unhandled error ' + JSON.stringify(errorToJsonObject(ex)));\r\n\r\n            if (timer) {\r\n                clearInterval(timer);\r\n            }\r\n            throw ex;\r\n        }\r\n    }\r\n}\r\n"]}