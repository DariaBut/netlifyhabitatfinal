{"version":3,"file":"serverLogger.js","sourceRoot":"","sources":["../../src/serverLogger.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,mCAAmE;AACnE,6CAAgD;AAExC,IAAA,OAAO,GAAkC,gBAAM,QAAxC,EAAE,SAAS,GAAuB,gBAAM,UAA7B,EAAE,QAAQ,GAAa,gBAAM,SAAnB,EAAE,MAAM,GAAK,gBAAM,OAAX,CAAY;AAExD,SAAS,KAAK,CAAC,IAAY,EAAE,MAAc;IACvC,IAAI,MAAM,IAAI,IAAI,CAAC,MAAM;QAAE,OAAO,IAAI,CAAC;IAEvC,OAAO,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;AACnD,CAAC;AAED,IAAM,gBAAgB,GAAG,EAAE,CAAC;AAC5B,IAAM,OAAO,GAAG,mBAAU,CAAC,OAAO,CAAC,GAAG,EAAE,uBAAuB,EAAE,KAAK,CAAC,CAAC;AACxE,IAAM,gBAAgB,GAAG,IAAI,oBAAU,CAAC,OAAO,CAAC;IAC5C,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;IACjC,MAAM,EAAE,OAAO,CACX,SAAS,CAAC,EAAE,MAAM,EAAE,gBAAgB,EAAE,CAAC,EACvC,QAAQ,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,EAClD,MAAM,CAAC,UAAC,IAAS;QACL,IAAA,SAAS,GAA8B,IAAI,UAAlC,EAAE,KAAK,GAAuB,IAAI,MAA3B,EAAE,OAAO,GAAc,IAAI,QAAlB,EAAK,IAAI,UAAK,IAAI,EAA7C,iCAAsC,CAAF,CAAU;QAEpD,uDAAuD;QACvD,IAAM,GAAG,GAAG,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,gCAAgC;QAC/E,OAAU,SAAS,SAAI,GAAG,UAAK,OAAO,UAClC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAC/D,CAAC;IACP,CAAC,CAAC,CACL;CACJ,CAAC,CAAC;AAEH,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAExC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,IAAM,aAAa,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;IACtF,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;CACxC;AAEY,QAAA,YAAY,GAAW,sBAAY,CAAC;IAC7C,UAAU,EAAE,gBAAgB;CAC/B,CAAC,CAAC;AAEH,IAAI,OAAO,EAAE;IACT,oBAAY,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;CAC5D","sourcesContent":["import { createLogger, format, transports, Logger } from 'winston';\r\nimport { getBoolEnv } from '@uniformdev/common';\r\n\r\nconst { combine, timestamp, colorize, printf } = format;\r\n\r\nfunction paddy(text: string, padlen: number) {\r\n    if (padlen <= text.length) return text;\r\n\r\n    return ' '.repeat(padlen - text.length) + text;\r\n}\r\n\r\nconst loggerTransports = [];\r\nconst isDebug = getBoolEnv(process.env, 'UNIFORM_OPTIONS_DEBUG', false);\r\nconst consoleTransport = new transports.Console({\r\n    level: isDebug ? 'debug' : 'info',\r\n    format: combine(\r\n        timestamp({ format: 'MM/dd-HH:mm:ss' }),\r\n        colorize({ all: true, colors: { debug: 'grey' } }),\r\n        printf((info: any) => {\r\n            const { timestamp, level, message, ...args } = info;\r\n\r\n            // const ts = timestamp.slice(0, 19).replace('T', ' ');\r\n            const lvl = paddy(level, 'debug'.length + 10); // 10 is for color special chars\r\n            return `${timestamp} ${lvl}: ${message} ${\r\n                Object.keys(args).length ? JSON.stringify(args, null, 2) : ''\r\n            }`;\r\n        })\r\n    ),\r\n});\r\n\r\nloggerTransports.push(consoleTransport);\r\n\r\nif (typeof window === 'undefined') {\r\n    const fileTransport = new transports.File({ filename: '.debug.log', level: 'debug' });\r\n    loggerTransports.push(fileTransport);\r\n}\r\n\r\nexport const serverLogger: Logger = createLogger({\r\n    transports: loggerTransports,\r\n});\r\n\r\nif (isDebug) {\r\n    serverLogger.debug('Logging initialized at debug level');\r\n}\r\n"]}