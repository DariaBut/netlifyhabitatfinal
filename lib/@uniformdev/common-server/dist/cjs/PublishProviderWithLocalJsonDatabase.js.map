{"version":3,"file":"PublishProviderWithLocalJsonDatabase.js","sourceRoot":"","sources":["../../src/PublishProviderWithLocalJsonDatabase.ts"],"names":[],"mappings":";;;AAAA,yBAA6D;AAC7D,6CAAoD;AAKpD;IAKI,8CAAoB,MAAc,EAAE,MAAc;QAA9B,WAAM,GAAN,MAAM,CAAQ;QAC9B,IAAI,CAAC,EAAE,GAAG,eAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAY,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAChF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,+EAA+E,GAAG,MAAM,CAC3F,CAAC;IACN,CAAC;IAED,sBAAc,sDAAI;aAAlB;YACI,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC;aAED,UAAmB,KAAQ;YACvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wDAAwD,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAEvF,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,KAAK,IAAI,uBAAc,CAAC,uBAAuB,CAAC,CAAC;YACnE,kBAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QACxD,CAAC;;;OAPA;IAgBL,2CAAC;AAAD,CAAC,AAhCD,IAgCC;AAhCqB,oFAAoC","sourcesContent":["import { readFileSync, writeFileSync, existsSync } from 'fs';\r\nimport { throwException } from '@uniformdev/common';\r\nimport { Logger } from '@uniformdev/common';\r\n\r\nimport { PublishProvider } from './PublishProvider';\r\n\r\nexport abstract class PublishProviderWithLocalJsonDatabase<T extends object> implements PublishProvider {\r\n    private readonly db: any;\r\n\r\n    protected readonly logger: Logger;\r\n\r\n    constructor(private dbPath: string, logger: Logger) {\r\n        this.db = existsSync(dbPath) ? JSON.parse(readFileSync(dbPath).toString()) : {};\r\n        this.logger = logger;\r\n\r\n        this.logger.info(\r\n            'PublishProviderWithLocalJsonDatabase initialized with JSON file database at: ' + dbPath\r\n        );\r\n    }\r\n\r\n    protected get site(): T {\r\n        return this.db['site'] || {};\r\n    }\r\n\r\n    protected set site(value: T) {\r\n        this.logger.debug('PublishProviderWithLocalJsonDatabase saved site data: ', this.site);\r\n\r\n        this.db['site'] = value || throwException('value must be defined');\r\n        writeFileSync(this.dbPath, JSON.stringify(this.db));\r\n    }\r\n\r\n    /**\r\n     * Deploys files from given path, and returns live site URL\r\n     * @param path to the directory to deploy to CDN\r\n     */\r\n    abstract async deploy(path: string): Promise<void>;\r\n\r\n    abstract behavior: 'replace-on-deploy' | 'update-on-deploy';\r\n}\r\n"]}